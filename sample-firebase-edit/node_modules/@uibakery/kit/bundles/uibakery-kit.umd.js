(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@nebular/theme'), require('rxjs'), require('rxjs/operators'), require('ngx-echarts'), require('@angular/common/http'), require('echarts'), require('@angular/common'), require('leaflet'), require('@asymmetrik/ngx-leaflet')) :
    typeof define === 'function' && define.amd ? define('@uibakery/kit', ['exports', '@angular/core', '@nebular/theme', 'rxjs', 'rxjs/operators', 'ngx-echarts', '@angular/common/http', 'echarts', '@angular/common', 'leaflet', '@asymmetrik/ngx-leaflet'], factory) :
    (global = global || self, factory((global.uibakery = global.uibakery || {}, global.uibakery.kit = {}), global.ng.core, global.theme, global.rxjs, global.rxjs.operators, global.ngxEcharts, global.ng.common.http, global.echarts, global.ng.common, global.leaflet, global.ngxLeaflet));
}(this, function (exports, core, theme, rxjs, operators, ngxEcharts, http, echarts, common, leaflet, ngxLeaflet) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var BkBarChartComponent = /** @class */ (function () {
        function BkBarChartComponent(theme) {
            this.theme = theme;
            this.options = {};
            this._data = [];
            this.colorConfig = {};
            this.destroyed$ = new rxjs.Subject();
        }
        Object.defineProperty(BkBarChartComponent.prototype, "data", {
            set: /**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                this._data = data;
                this.updateOptions();
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        BkBarChartComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            var _this = this;
            this.theme.getJsTheme()
                .pipe(operators.takeUntil(this.destroyed$))
                .subscribe((/**
             * @param {?} config
             * @return {?}
             */
            function (config) {
                _this.colorConfig = config.variables.charts;
                _this.updateOptions();
            }));
        };
        /**
         * @return {?}
         */
        BkBarChartComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this.destroyed$.next();
        };
        /**
         * @private
         * @return {?}
         */
        BkBarChartComponent.prototype.updateOptions = /**
         * @private
         * @return {?}
         */
        function () {
            this.options = {
                backgroundColor: this.colorConfig.bg,
                color: [this.colorConfig.primary],
                tooltip: {
                    trigger: 'axis',
                    axisPointer: {
                        type: 'shadow',
                    },
                },
                grid: {
                    left: '3%',
                    right: '4%',
                    bottom: '3%',
                    containLabel: true,
                },
                xAxis: [
                    {
                        type: 'category',
                        data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],
                        axisTick: {
                            alignWithLabel: true,
                        },
                        axisLine: {
                            lineStyle: {
                                color: this.colorConfig.axisLineColor,
                            },
                        },
                        axisLabel: {
                            textStyle: {
                                color: this.colorConfig.textColor,
                            },
                        },
                    },
                ],
                yAxis: [
                    {
                        type: 'value',
                        axisLine: {
                            lineStyle: {
                                color: this.colorConfig.axisLineColor,
                            },
                        },
                        splitLine: {
                            lineStyle: {
                                color: this.colorConfig.splitLineColor,
                            },
                        },
                        axisLabel: {
                            textStyle: {
                                color: this.colorConfig.textColor,
                            },
                        },
                    },
                ],
                series: [
                    {
                        name: 'Score',
                        type: 'bar',
                        barWidth: '60%',
                        data: [10, 52, 200, 334, 390, 330, 220],
                    },
                ],
            };
        };
        BkBarChartComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'bk-bar-chart',
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        template: "\n    <div echarts [options]=\"options\" [autoResize]=\"true\" [style.height.%]=\"100\"></div>\n  ",
                        styles: [':host { display: block }']
                    }] }
        ];
        /** @nocollapse */
        BkBarChartComponent.ctorParameters = function () { return [
            { type: theme.NbThemeService }
        ]; };
        BkBarChartComponent.propDecorators = {
            data: [{ type: core.Input }]
        };
        return BkBarChartComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    // tslint:disable-next-line:directive-selector
    var EchartsDirective = /** @class */ (function (_super) {
        __extends(EchartsDirective, _super);
        function EchartsDirective(element, cd, ngZone) {
            var _this = _super.call(this, element, ngZone) || this;
            _this.element = element;
            _this.cd = cd;
            _this.alive = true;
            return _this;
        }
        /**
         * @return {?}
         */
        EchartsDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this.alive = false;
        };
        /**
         * @return {?}
         */
        EchartsDirective.prototype.ngDoCheck = /**
         * @return {?}
         */
        function () {
            _super.prototype.ngDoCheck.call(this);
            this.invalidate();
        };
        /**
         * Echarts work in a strange way, they're detecting if component visible or not
         * and only then trying to decide render chart or not.
         * In a number of cases like Nebular Tabset we have element already rendered but hidden for now.
         * And when we're trying to make it visible echarts doesn't react and stays not rendered.
         *
         * Invoking intersection observer on each doCheck provides us the ability to track
         * whether we need to update charts component or not.
         * */
        /**
         * Echarts work in a strange way, they're detecting if component visible or not
         * and only then trying to decide render chart or not.
         * In a number of cases like Nebular Tabset we have element already rendered but hidden for now.
         * And when we're trying to make it visible echarts doesn't react and stays not rendered.
         *
         * Invoking intersection observer on each doCheck provides us the ability to track
         * whether we need to update charts component or not.
         *
         * @private
         * @return {?}
         */
        EchartsDirective.prototype.invalidate = /**
         * Echarts work in a strange way, they're detecting if component visible or not
         * and only then trying to decide render chart or not.
         * In a number of cases like Nebular Tabset we have element already rendered but hidden for now.
         * And when we're trying to make it visible echarts doesn't react and stays not rendered.
         *
         * Invoking intersection observer on each doCheck provides us the ability to track
         * whether we need to update charts component or not.
         *
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            /** @type {?} */
            var o = new IntersectionObserver((/**
             * @param {?} entries
             * @return {?}
             */
            function (entries) {
                var _a = __read(entries, 1), entry = _a[0];
                // Means component is visible
                if (entry.isIntersecting) {
                    if (_this.alive) {
                        _this.cd.detectChanges();
                    }
                    o.disconnect();
                }
            }));
            o.observe(this.element.nativeElement);
        };
        EchartsDirective.decorators = [
            { type: core.Directive, args: [{ selector: '[echarts]' },] }
        ];
        /** @nocollapse */
        EchartsDirective.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: core.ChangeDetectorRef },
            { type: core.NgZone }
        ]; };
        return EchartsDirective;
    }(ngxEcharts.ɵa));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var EchartsModule = /** @class */ (function () {
        function EchartsModule() {
        }
        EchartsModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [EchartsDirective],
                        exports: [EchartsDirective],
                    },] }
        ];
        return EchartsModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var BkBarChartModule = /** @class */ (function () {
        function BkBarChartModule() {
        }
        BkBarChartModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [EchartsModule],
                        declarations: [BkBarChartComponent],
                        exports: [BkBarChartComponent],
                    },] }
        ];
        return BkBarChartModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var BkBubbleMapComponent = /** @class */ (function () {
        function BkBubbleMapComponent(theme, http, cd) {
            this.theme = theme;
            this.http = http;
            this.cd = cd;
            this.options = {};
            this._data = { countryCoordinates: [], mapData: [] };
            this.colorConfig = {};
            this.geoColors = [];
            this.countryColorMap = {};
            this.max = -Infinity;
            this.destroyed$ = new rxjs.Subject();
        }
        Object.defineProperty(BkBubbleMapComponent.prototype, "data", {
            set: /**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                this._data = data;
                // avoid showing map without colors
                if (this.initialized) {
                    this.updateOptions();
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        BkBubbleMapComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            var _this = this;
            rxjs.combineLatest([
                this.http.get('assets/map/world.json'),
                this.theme.getJsTheme(),
            ])
                .pipe(operators.takeUntil(this.destroyed$))
                .subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 2), map = _b[0], config = _b[1];
                echarts.registerMap('world', map);
                _this.initColors(config);
                _this.updateOptions();
                _this.initialized = true;
                _this.cd.detectChanges();
            }));
        };
        /**
         * @return {?}
         */
        BkBubbleMapComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this.destroyed$.next();
        };
        /**
         * @private
         * @param {?} config
         * @return {?}
         */
        BkBubbleMapComponent.prototype.initColors = /**
         * @private
         * @param {?} config
         * @return {?}
         */
        function (config) {
            var _this = this;
            this.colorConfig = config.variables.bubbleMap;
            this.geoColors = [
                this.colorConfig.primary,
                this.colorConfig.info,
                this.colorConfig.success,
                this.colorConfig.warning,
                this.colorConfig.danger,
            ];
            this._data.mapData.forEach((/**
             * @param {?} itemOpt
             * @return {?}
             */
            function (itemOpt) {
                _this.countryColorMap[itemOpt.name] = _this.getRandomGeoColor();
            }));
        };
        /**
         * @private
         * @return {?}
         */
        BkBubbleMapComponent.prototype.updateOptions = /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            this._data.mapData.forEach((/**
             * @param {?} itemOpt
             * @return {?}
             */
            function (itemOpt) {
                if (itemOpt.value > _this.max) {
                    _this.max = itemOpt.value;
                }
            }));
            this.options = {
                title: {
                    text: 'World Population (2011)',
                    left: 'center',
                    top: 'top',
                    textStyle: {
                        color: this.colorConfig.titleColor,
                    },
                },
                tooltip: {
                    trigger: 'item',
                    formatter: (/**
                     * @param {?} params
                     * @return {?}
                     */
                    function (params) {
                        return params.name + ': ' + params.value[2];
                    }),
                },
                visualMap: {
                    show: false,
                    min: 0,
                    max: this.max,
                    inRange: {
                        symbolSize: [6, 60],
                    },
                },
                geo: {
                    name: 'World Population (2010)',
                    type: 'map',
                    map: 'world',
                    roam: true,
                    label: {
                        emphasis: {
                            show: false,
                        },
                    },
                    itemStyle: {
                        normal: {
                            areaColor: this.colorConfig.areaColor,
                            borderColor: this.colorConfig.areaBorderColor,
                        },
                        emphasis: {
                            areaColor: this.colorConfig.areaHoverColor,
                        },
                    },
                    zoom: 1.1,
                },
                series: [
                    {
                        type: 'scatter',
                        coordinateSystem: 'geo',
                        data: this._data.mapData.map((/**
                         * @param {?} itemOpt
                         * @return {?}
                         */
                        function (itemOpt) {
                            return {
                                name: itemOpt.name,
                                value: [
                                    _this._data.countryCoordinates[itemOpt.code].longitude,
                                    _this._data.countryCoordinates[itemOpt.code].latitude,
                                    itemOpt.value,
                                ],
                                itemStyle: {
                                    normal: {
                                        color: _this.getCountryColor(itemOpt.name),
                                    },
                                },
                            };
                        })),
                    },
                ],
            };
        };
        /**
         * @private
         * @param {?} countryName
         * @return {?}
         */
        BkBubbleMapComponent.prototype.getCountryColor = /**
         * @private
         * @param {?} countryName
         * @return {?}
         */
        function (countryName) {
            /** @type {?} */
            var color = this.countryColorMap[countryName];
            if (color) {
                return color;
            }
            /** @type {?} */
            var generatedColor = this.getRandomGeoColor();
            this.countryColorMap[countryName] = generatedColor;
            return generatedColor;
        };
        /**
         * @private
         * @return {?}
         */
        BkBubbleMapComponent.prototype.getRandomGeoColor = /**
         * @private
         * @return {?}
         */
        function () {
            /** @type {?} */
            var index = Math.round(Math.random() * this.geoColors.length);
            return this.geoColors[index];
        };
        BkBubbleMapComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'bk-bubble-map',
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        template: "\n    <div echarts [options]=\"options\" [autoResize]=\"true\" [style.height.%]=\"100\"></div>\n  ",
                        styles: [':host { display: block }']
                    }] }
        ];
        /** @nocollapse */
        BkBubbleMapComponent.ctorParameters = function () { return [
            { type: theme.NbThemeService },
            { type: http.HttpClient },
            { type: core.ChangeDetectorRef }
        ]; };
        BkBubbleMapComponent.propDecorators = {
            data: [{ type: core.Input }]
        };
        return BkBubbleMapComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var BkBubbleMapModule = /** @class */ (function () {
        function BkBubbleMapModule() {
        }
        BkBubbleMapModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [common.CommonModule, http.HttpClientModule, EchartsModule],
                        declarations: [BkBubbleMapComponent],
                        exports: [BkBubbleMapComponent],
                    },] }
        ];
        return BkBubbleMapModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var BkDoughnutChartComponent = /** @class */ (function () {
        function BkDoughnutChartComponent(theme) {
            this.theme = theme;
            this.options = {};
            this._data = [];
            this.colorConfig = {};
            this.destroyed$ = new rxjs.Subject();
        }
        Object.defineProperty(BkDoughnutChartComponent.prototype, "data", {
            set: /**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                this._data = data;
                this.updateOptions();
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        BkDoughnutChartComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            var _this = this;
            this.theme.getJsTheme()
                .pipe(operators.takeUntil(this.destroyed$))
                .subscribe((/**
             * @param {?} config
             * @return {?}
             */
            function (config) {
                _this.colorConfig = config.variables.charts;
                _this.updateOptions();
            }));
        };
        /**
         * @return {?}
         */
        BkDoughnutChartComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this.destroyed$.next();
        };
        /**
         * @private
         * @return {?}
         */
        BkDoughnutChartComponent.prototype.updateOptions = /**
         * @private
         * @return {?}
         */
        function () {
            this.options = {
                backgroundColor: this.colorConfig.bg,
                color: [
                    this.colorConfig.warning,
                    this.colorConfig.info,
                    this.colorConfig.danger,
                    this.colorConfig.success,
                    this.colorConfig.primary,
                ],
                tooltip: {
                    trigger: 'item',
                    formatter: '{a} <br/>{b}: {c} ({d}%)',
                },
                legend: {
                    orient: 'vertical',
                    x: 'left',
                    data: ['USA', 'Germany', 'France', 'Canada', 'Russia'],
                    textStyle: {
                        color: this.colorConfig.textColor,
                    },
                },
                series: [
                    {
                        name: 'Countries',
                        type: 'pie',
                        radius: ['50%', '70%'],
                        avoidLabelOverlap: false,
                        label: {
                            normal: {
                                show: false,
                                position: 'center',
                            },
                            emphasis: {
                                show: true,
                                textStyle: {
                                    fontSize: '25',
                                    fontWeight: 'bold',
                                },
                            },
                        },
                        data: this._data,
                    },
                ],
            };
        };
        BkDoughnutChartComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'bk-doughnut-chart',
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        template: "\n    <div echarts [options]=\"options\" [autoResize]=\"true\" [style.height.%]=\"100\"></div>\n  ",
                        styles: [':host { display: block }']
                    }] }
        ];
        /** @nocollapse */
        BkDoughnutChartComponent.ctorParameters = function () { return [
            { type: theme.NbThemeService }
        ]; };
        BkDoughnutChartComponent.propDecorators = {
            data: [{ type: core.Input }]
        };
        return BkDoughnutChartComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var BkDoughnutChartModule = /** @class */ (function () {
        function BkDoughnutChartModule() {
        }
        BkDoughnutChartModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [EchartsModule],
                        declarations: [BkDoughnutChartComponent],
                        exports: [BkDoughnutChartComponent],
                    },] }
        ];
        return BkDoughnutChartModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var BkLineChartComponent = /** @class */ (function () {
        function BkLineChartComponent(theme) {
            this.theme = theme;
            this.options = {};
            this._data = { income: [], outcome: [], profit: [] };
            this.colorConfig = {};
            this.destroyed$ = new rxjs.Subject();
        }
        Object.defineProperty(BkLineChartComponent.prototype, "data", {
            set: /**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                this._data = data;
                this.updateOptions();
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        BkLineChartComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            var _this = this;
            this.theme.getJsTheme()
                .pipe(operators.takeUntil(this.destroyed$))
                .subscribe((/**
             * @param {?} config
             * @return {?}
             */
            function (config) {
                _this.colorConfig = config.variables.charts;
                _this.updateOptions();
            }));
        };
        /**
         * @return {?}
         */
        BkLineChartComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this.destroyed$.next();
        };
        /**
         * @private
         * @return {?}
         */
        BkLineChartComponent.prototype.updateOptions = /**
         * @private
         * @return {?}
         */
        function () {
            this.options = {
                backgroundColor: this.colorConfig.bg,
                color: [this.colorConfig.danger, this.colorConfig.primary, this.colorConfig.info],
                tooltip: {
                    trigger: 'item',
                    formatter: '{a} <br/>{b} : {c}',
                },
                xAxis: [
                    {
                        type: 'category',
                        data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],
                        axisTick: {
                            alignWithLabel: true,
                        },
                        axisLine: {
                            lineStyle: {
                                color: this.colorConfig.axisLineColor,
                            },
                        },
                        axisLabel: {
                            textStyle: {
                                color: this.colorConfig.textColor,
                            },
                        },
                    },
                ],
                yAxis: [
                    {
                        axisLine: {
                            lineStyle: {
                                color: this.colorConfig.axisLineColor,
                            },
                        },
                        splitLine: {
                            lineStyle: {
                                color: this.colorConfig.splitLineColor,
                            },
                        },
                        axisLabel: {
                            textStyle: {
                                color: this.colorConfig.textColor,
                            },
                        },
                    },
                ],
                grid: {
                    left: '3%',
                    right: '4%',
                    bottom: '3%',
                    containLabel: true,
                },
                series: [
                    {
                        name: 'Income',
                        type: 'line',
                        data: this._data.income,
                    },
                    {
                        name: 'Outcome',
                        type: 'line',
                        data: this._data.outcome,
                    },
                    {
                        name: 'Profit',
                        type: 'line',
                        data: this._data.profit,
                    },
                ],
            };
        };
        BkLineChartComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'bk-line-chart',
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        template: "\n    <div echarts [options]=\"options\" [autoResize]=\"true\" [style.height.%]=\"100\"></div>\n  ",
                        styles: [':host { display: block }']
                    }] }
        ];
        /** @nocollapse */
        BkLineChartComponent.ctorParameters = function () { return [
            { type: theme.NbThemeService }
        ]; };
        BkLineChartComponent.propDecorators = {
            data: [{ type: core.Input }]
        };
        return BkLineChartComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var BkLineChartModule = /** @class */ (function () {
        function BkLineChartModule() {
        }
        BkLineChartModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [EchartsModule],
                        declarations: [BkLineChartComponent],
                        exports: [BkLineChartComponent],
                    },] }
        ];
        return BkLineChartModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var BkMultipleAxisChartComponent = /** @class */ (function () {
        function BkMultipleAxisChartComponent(theme) {
            this.theme = theme;
            this.options = {};
            this._data = { firstDataset: [], secondDataset: [] };
            this.colorConfig = {};
            this.destroyed$ = new rxjs.Subject();
        }
        Object.defineProperty(BkMultipleAxisChartComponent.prototype, "data", {
            set: /**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                this._data = data;
                this.updateOptions();
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        BkMultipleAxisChartComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            var _this = this;
            this.theme.getJsTheme()
                .pipe(operators.takeUntil(this.destroyed$))
                .subscribe((/**
             * @param {?} config
             * @return {?}
             */
            function (config) {
                _this.colorConfig = config.variables.charts;
                _this.updateOptions();
            }));
        };
        /**
         * @return {?}
         */
        BkMultipleAxisChartComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this.destroyed$.next();
        };
        /**
         * @private
         * @return {?}
         */
        BkMultipleAxisChartComponent.prototype.updateOptions = /**
         * @private
         * @return {?}
         */
        function () {
            this.options = {
                backgroundColor: this.colorConfig.bg,
                color: [
                    this.colorConfig.primary,
                    this.colorConfig.info,
                ],
                tooltip: {
                    trigger: 'axis',
                    axisPointer: {
                        type: 'cross',
                    },
                },
                legend: {
                    data: ['First Dataset', 'Second Dataset'],
                    textStyle: {
                        color: this.colorConfig.textColor,
                    },
                },
                xAxis: [
                    {
                        type: 'category',
                        axisTick: {
                            alignWithLabel: true,
                        },
                        data: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],
                        axisLine: {
                            lineStyle: {
                                color: this.colorConfig.axisLineColor,
                            },
                        },
                        splitLine: {
                            lineStyle: {
                                color: this.colorConfig.splitLineColor,
                            },
                        },
                        axisLabel: {
                            textStyle: {
                                color: this.colorConfig.textColor,
                            },
                        },
                    },
                ],
                yAxis: [
                    {
                        type: 'value',
                        name: 'First Dataset',
                        min: -90,
                        max: 60,
                        position: 'left',
                        axisLine: {
                            lineStyle: {
                                color: this.colorConfig.primary,
                            },
                        },
                        axisLabel: {
                            formatter: '{value} °C',
                        },
                    },
                    {
                        type: 'value',
                        name: 'Second Dataset',
                        min: -90,
                        max: 80,
                        position: 'right',
                        axisLine: {
                            lineStyle: {
                                color: this.colorConfig.danger,
                            },
                        },
                        axisLabel: {
                            formatter: '{value} °C',
                        },
                        splitLine: {
                            show: false,
                        },
                    },
                ],
                series: [
                    {
                        name: 'First Dataset',
                        type: 'line',
                        yAxisIndex: 0,
                        smooth: true,
                        itemStyle: { color: this.colorConfig.primary },
                        data: this._data.firstDataset,
                    },
                    {
                        name: 'Second Dataset',
                        type: 'line',
                        yAxisIndex: 1,
                        smooth: true,
                        itemStyle: { color: this.colorConfig.danger },
                        data: this._data.secondDataset,
                    },
                ],
            };
        };
        BkMultipleAxisChartComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'bk-multiple-axis-chart',
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        template: "\n    <div echarts [options]=\"options\" [autoResize]=\"true\" [style.height.%]=\"100\"></div>\n  ",
                        styles: [':host { display: block }']
                    }] }
        ];
        /** @nocollapse */
        BkMultipleAxisChartComponent.ctorParameters = function () { return [
            { type: theme.NbThemeService }
        ]; };
        BkMultipleAxisChartComponent.propDecorators = {
            data: [{ type: core.Input }]
        };
        return BkMultipleAxisChartComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var BkMultipleAxisChartModule = /** @class */ (function () {
        function BkMultipleAxisChartModule() {
        }
        BkMultipleAxisChartModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [EchartsModule],
                        declarations: [BkMultipleAxisChartComponent],
                        exports: [BkMultipleAxisChartComponent],
                    },] }
        ];
        return BkMultipleAxisChartModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var BkMultipleBarChartComponent = /** @class */ (function () {
        function BkMultipleBarChartComponent(theme) {
            this.theme = theme;
            this.options = {};
            this._data = { firstDataset: [], secondDataset: [] };
            this.colorConfig = {};
            this.destroyed$ = new rxjs.Subject();
        }
        Object.defineProperty(BkMultipleBarChartComponent.prototype, "data", {
            set: /**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                this._data = data;
                this.updateOptions();
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        BkMultipleBarChartComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            var _this = this;
            this.theme.getJsTheme()
                .pipe(operators.takeUntil(this.destroyed$))
                .subscribe((/**
             * @param {?} config
             * @return {?}
             */
            function (config) {
                _this.colorConfig = config.variables.charts;
                _this.updateOptions();
            }));
        };
        /**
         * @return {?}
         */
        BkMultipleBarChartComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this.destroyed$.next();
        };
        /**
         * @private
         * @return {?}
         */
        BkMultipleBarChartComponent.prototype.updateOptions = /**
         * @private
         * @return {?}
         */
        function () {
            this.options = {
                backgroundColor: this.colorConfig.bg,
                color: [this.colorConfig.primary],
                legend: {
                    data: ['First Dataset', 'Second Dataset'],
                    textStyle: {
                        color: this.colorConfig.textColor,
                    },
                },
                tooltip: {
                    trigger: 'axis',
                    axisPointer: {
                        type: 'shadow',
                    },
                },
                grid: {
                    left: '3%',
                    right: '4%',
                    bottom: '3%',
                    containLabel: true,
                },
                xAxis: [
                    {
                        type: 'category',
                        data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],
                        axisTick: {
                            alignWithLabel: true,
                        },
                        axisLine: {
                            lineStyle: {
                                color: this.colorConfig.axisLineColor,
                            },
                        },
                        axisLabel: {
                            textStyle: {
                                color: this.colorConfig.textColor,
                            },
                        },
                    },
                ],
                yAxis: [
                    {
                        type: 'value',
                        axisLine: {
                            lineStyle: {
                                color: this.colorConfig.axisLineColor,
                            },
                        },
                        splitLine: {
                            lineStyle: {
                                color: this.colorConfig.splitLineColor,
                            },
                        },
                        axisLabel: {
                            textStyle: {
                                color: this.colorConfig.textColor,
                            },
                        },
                    },
                ],
                series: [
                    {
                        name: 'First Dataset',
                        type: 'bar',
                        itemStyle: { color: this.colorConfig.primary },
                        data: this._data.firstDataset,
                    },
                    {
                        name: 'Second Dataset',
                        type: 'bar',
                        itemStyle: { color: this.colorConfig.danger },
                        data: this._data.secondDataset,
                    },
                ],
            };
        };
        BkMultipleBarChartComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'bk-multiple-bar-chart',
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        template: "\n    <div echarts [options]=\"options\" [autoResize]=\"true\" [style.height.%]=\"100\"></div>\n  ",
                        styles: [':host { display: block }']
                    }] }
        ];
        /** @nocollapse */
        BkMultipleBarChartComponent.ctorParameters = function () { return [
            { type: theme.NbThemeService }
        ]; };
        BkMultipleBarChartComponent.propDecorators = {
            data: [{ type: core.Input }]
        };
        return BkMultipleBarChartComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var BkMultipleBarChartModule = /** @class */ (function () {
        function BkMultipleBarChartModule() {
        }
        BkMultipleBarChartModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [EchartsModule],
                        declarations: [BkMultipleBarChartComponent],
                        exports: [BkMultipleBarChartComponent],
                    },] }
        ];
        return BkMultipleBarChartModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var BkPieChartComponent = /** @class */ (function () {
        function BkPieChartComponent(theme) {
            this.theme = theme;
            this.options = {};
            this._data = [];
            this.colorConfig = {};
            this.destroyed$ = new rxjs.Subject();
        }
        Object.defineProperty(BkPieChartComponent.prototype, "data", {
            set: /**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                this._data = data;
                this.updateOptions();
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        BkPieChartComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            var _this = this;
            this.theme.getJsTheme()
                .pipe(operators.takeUntil(this.destroyed$))
                .subscribe((/**
             * @param {?} config
             * @return {?}
             */
            function (config) {
                _this.colorConfig = config.variables.charts;
                _this.updateOptions();
            }));
        };
        /**
         * @return {?}
         */
        BkPieChartComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this.destroyed$.next();
        };
        /**
         * @private
         * @return {?}
         */
        BkPieChartComponent.prototype.updateOptions = /**
         * @private
         * @return {?}
         */
        function () {
            this.options = {
                backgroundColor: this.colorConfig.bg,
                color: [
                    this.colorConfig.warning,
                    this.colorConfig.info,
                    this.colorConfig.danger,
                    this.colorConfig.success,
                    this.colorConfig.primary,
                ],
                tooltip: {
                    trigger: 'item',
                    formatter: '{a} <br/>{b} : {c} ({d}%)',
                },
                legend: {
                    orient: 'vertical',
                    left: 'left',
                    data: ['USA', 'Germany', 'France', 'Canada', 'Russia'],
                    textStyle: {
                        color: this.colorConfig.textColor,
                    },
                },
                series: [
                    {
                        name: 'Countries',
                        type: 'pie',
                        radius: '80%',
                        center: ['50%', '50%'],
                        data: this._data,
                        itemStyle: {
                            emphasis: {
                                shadowBlur: 10,
                                shadowOffsetX: 0,
                                shadowColor: this.colorConfig.itemHoverShadowColor,
                            },
                        },
                        label: {
                            normal: {
                                textStyle: {
                                    color: this.colorConfig.textColor,
                                },
                            },
                        },
                        labelLine: {
                            normal: {
                                lineStyle: {
                                    color: this.colorConfig.axisLineColor,
                                },
                            },
                        },
                    },
                ],
            };
        };
        BkPieChartComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'bk-pie-chart',
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        template: "\n    <div echarts [options]=\"options\" [autoResize]=\"true\" [style.height.%]=\"100\"></div>\n  ",
                        styles: [':host { display: block }']
                    }] }
        ];
        /** @nocollapse */
        BkPieChartComponent.ctorParameters = function () { return [
            { type: theme.NbThemeService }
        ]; };
        BkPieChartComponent.propDecorators = {
            data: [{ type: core.Input }]
        };
        return BkPieChartComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var BkPieChartModule = /** @class */ (function () {
        function BkPieChartModule() {
        }
        BkPieChartModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [EchartsModule],
                        declarations: [BkPieChartComponent],
                        exports: [BkPieChartComponent],
                    },] }
        ];
        return BkPieChartModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var BkMapComponent = /** @class */ (function () {
        function BkMapComponent() {
            this.options = {
                layers: [
                    leaflet.tileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', { maxZoom: 18, attribution: '...' }),
                ],
                zoom: 5,
                center: leaflet.latLng({ lat: 38.991709, lng: -76.886109 }),
            };
        }
        BkMapComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'bk-map',
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        template: "\n    <div leaflet [leafletOptions]=\"options\"></div>\n  ",
                        styles: [":host{display:block}div[leaflet]{width:100%;height:100%}"]
                    }] }
        ];
        return BkMapComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var BkMapModule = /** @class */ (function () {
        function BkMapModule() {
        }
        BkMapModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [ngxLeaflet.LeafletModule],
                        declarations: [BkMapComponent],
                        exports: [BkMapComponent],
                    },] }
        ];
        return BkMapModule;
    }());

    exports.BkBarChartComponent = BkBarChartComponent;
    exports.BkBarChartModule = BkBarChartModule;
    exports.BkBubbleMapComponent = BkBubbleMapComponent;
    exports.BkBubbleMapModule = BkBubbleMapModule;
    exports.BkDoughnutChartComponent = BkDoughnutChartComponent;
    exports.BkDoughnutChartModule = BkDoughnutChartModule;
    exports.BkLineChartComponent = BkLineChartComponent;
    exports.BkLineChartModule = BkLineChartModule;
    exports.BkMapComponent = BkMapComponent;
    exports.BkMapModule = BkMapModule;
    exports.BkMultipleAxisChartComponent = BkMultipleAxisChartComponent;
    exports.BkMultipleAxisChartModule = BkMultipleAxisChartModule;
    exports.BkMultipleBarChartComponent = BkMultipleBarChartComponent;
    exports.BkMultipleBarChartModule = BkMultipleBarChartModule;
    exports.BkPieChartComponent = BkPieChartComponent;
    exports.BkPieChartModule = BkPieChartModule;
    exports.ɵa = EchartsModule;
    exports.ɵb = EchartsDirective;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=uibakery-kit.umd.js.map
