/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
import { NbThemeService } from '@nebular/theme';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
export class BkDoughnutChartComponent {
    /**
     * @param {?} theme
     */
    constructor(theme) {
        this.theme = theme;
        this.options = {};
        this._data = [];
        this.colorConfig = {};
        this.destroyed$ = new Subject();
    }
    /**
     * @param {?} data
     * @return {?}
     */
    set data(data) {
        this._data = data;
        this.updateOptions();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.theme.getJsTheme()
            .pipe(takeUntil(this.destroyed$))
            .subscribe((/**
         * @param {?} config
         * @return {?}
         */
        (config) => {
            this.colorConfig = config.variables.charts;
            this.updateOptions();
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.destroyed$.next();
    }
    /**
     * @private
     * @return {?}
     */
    updateOptions() {
        this.options = {
            backgroundColor: this.colorConfig.bg,
            color: [
                this.colorConfig.warning,
                this.colorConfig.info,
                this.colorConfig.danger,
                this.colorConfig.success,
                this.colorConfig.primary,
            ],
            tooltip: {
                trigger: 'item',
                formatter: '{a} <br/>{b}: {c} ({d}%)',
            },
            legend: {
                orient: 'vertical',
                x: 'left',
                data: ['USA', 'Germany', 'France', 'Canada', 'Russia'],
                textStyle: {
                    color: this.colorConfig.textColor,
                },
            },
            series: [
                {
                    name: 'Countries',
                    type: 'pie',
                    radius: ['50%', '70%'],
                    avoidLabelOverlap: false,
                    label: {
                        normal: {
                            show: false,
                            position: 'center',
                        },
                        emphasis: {
                            show: true,
                            textStyle: {
                                fontSize: '25',
                                fontWeight: 'bold',
                            },
                        },
                    },
                    data: this._data,
                },
            ],
        };
    }
}
BkDoughnutChartComponent.decorators = [
    { type: Component, args: [{
                selector: 'bk-doughnut-chart',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: `
    <div echarts [options]="options" [autoResize]="true" [style.height.%]="100"></div>
  `,
                styles: [':host { display: block }']
            }] }
];
/** @nocollapse */
BkDoughnutChartComponent.ctorParameters = () => [
    { type: NbThemeService }
];
BkDoughnutChartComponent.propDecorators = {
    data: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    BkDoughnutChartComponent.prototype.options;
    /**
     * @type {?}
     * @private
     */
    BkDoughnutChartComponent.prototype._data;
    /**
     * @type {?}
     * @private
     */
    BkDoughnutChartComponent.prototype.colorConfig;
    /**
     * @type {?}
     * @private
     */
    BkDoughnutChartComponent.prototype.destroyed$;
    /**
     * @type {?}
     * @private
     */
    BkDoughnutChartComponent.prototype.theme;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG91Z2hudXQtY2hhcnQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHVpYmFrZXJ5L2tpdC8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL2RvdWdobnV0LWNoYXJ0L2RvdWdobnV0LWNoYXJ0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLHVCQUF1QixFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQXFCLE1BQU0sZUFBZSxDQUFDO0FBQzdGLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVoRCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQy9CLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQVkzQyxNQUFNLE9BQU8sd0JBQXdCOzs7O0lBYW5DLFlBQW9CLEtBQXFCO1FBQXJCLFVBQUssR0FBTCxLQUFLLENBQWdCO1FBTnpDLFlBQU8sR0FBUSxFQUFFLENBQUM7UUFFVixVQUFLLEdBQUcsRUFBRSxDQUFDO1FBQ1gsZ0JBQVcsR0FBUSxFQUFFLENBQUM7UUFDdEIsZUFBVSxHQUFrQixJQUFJLE9BQU8sRUFBRSxDQUFDO0lBR2xELENBQUM7Ozs7O0lBWkQsSUFBYSxJQUFJLENBQUMsSUFBSTtRQUNwQixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztRQUNsQixJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDdkIsQ0FBQzs7OztJQVdELFFBQVE7UUFDTixJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsRUFBRTthQUNwQixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQzthQUNoQyxTQUFTOzs7O1FBQUMsQ0FBQyxNQUF3QixFQUFFLEVBQUU7WUFDdEMsSUFBSSxDQUFDLFdBQVcsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQztZQUMzQyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDdkIsQ0FBQyxFQUFDLENBQUM7SUFDUCxDQUFDOzs7O0lBRUQsV0FBVztRQUNULElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDekIsQ0FBQzs7Ozs7SUFFTyxhQUFhO1FBQ25CLElBQUksQ0FBQyxPQUFPLEdBQUc7WUFDYixlQUFlLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFO1lBQ3BDLEtBQUssRUFBRTtnQkFDTCxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU87Z0JBQ3hCLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSTtnQkFDckIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNO2dCQUN2QixJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU87Z0JBQ3hCLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTzthQUN6QjtZQUNELE9BQU8sRUFBRTtnQkFDUCxPQUFPLEVBQUUsTUFBTTtnQkFDZixTQUFTLEVBQUUsMEJBQTBCO2FBQ3RDO1lBQ0QsTUFBTSxFQUFFO2dCQUNOLE1BQU0sRUFBRSxVQUFVO2dCQUNsQixDQUFDLEVBQUUsTUFBTTtnQkFDVCxJQUFJLEVBQUUsQ0FBQyxLQUFLLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsUUFBUSxDQUFDO2dCQUN0RCxTQUFTLEVBQUU7b0JBQ1QsS0FBSyxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUztpQkFDbEM7YUFDRjtZQUNELE1BQU0sRUFBRTtnQkFDTjtvQkFDRSxJQUFJLEVBQUUsV0FBVztvQkFDakIsSUFBSSxFQUFFLEtBQUs7b0JBQ1gsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQztvQkFDdEIsaUJBQWlCLEVBQUUsS0FBSztvQkFDeEIsS0FBSyxFQUFFO3dCQUNMLE1BQU0sRUFBRTs0QkFDTixJQUFJLEVBQUUsS0FBSzs0QkFDWCxRQUFRLEVBQUUsUUFBUTt5QkFDbkI7d0JBQ0QsUUFBUSxFQUFFOzRCQUNSLElBQUksRUFBRSxJQUFJOzRCQUNWLFNBQVMsRUFBRTtnQ0FDVCxRQUFRLEVBQUUsSUFBSTtnQ0FDZCxVQUFVLEVBQUUsTUFBTTs2QkFDbkI7eUJBQ0Y7cUJBQ0Y7b0JBQ0QsSUFBSSxFQUFFLElBQUksQ0FBQyxLQUFLO2lCQUNqQjthQUNGO1NBQ0YsQ0FBQztJQUNKLENBQUM7OztZQXBGRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLG1CQUFtQjtnQkFDN0IsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07Z0JBSS9DLFFBQVEsRUFBRTs7R0FFVDt5QkFKQywwQkFBMEI7YUFLN0I7Ozs7WUFkUSxjQUFjOzs7bUJBaUJwQixLQUFLOzs7O0lBS04sMkNBQWtCOzs7OztJQUVsQix5Q0FBbUI7Ozs7O0lBQ25CLCtDQUE4Qjs7Ozs7SUFDOUIsOENBQWtEOzs7OztJQUV0Qyx5Q0FBNkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBJbnB1dCwgT25EZXN0cm95LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5iVGhlbWVTZXJ2aWNlIH0gZnJvbSAnQG5lYnVsYXIvdGhlbWUnO1xuaW1wb3J0IHsgTmJKU1RoZW1lT3B0aW9ucyB9IGZyb20gJ0BuZWJ1bGFyL3RoZW1lL3NlcnZpY2VzL2pzLXRoZW1lcy90aGVtZS5vcHRpb25zJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IHRha2VVbnRpbCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYmstZG91Z2hudXQtY2hhcnQnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgc3R5bGVzOiBbXG4gICAgJzpob3N0IHsgZGlzcGxheTogYmxvY2sgfScsXG4gIF0sXG4gIHRlbXBsYXRlOiBgXG4gICAgPGRpdiBlY2hhcnRzIFtvcHRpb25zXT1cIm9wdGlvbnNcIiBbYXV0b1Jlc2l6ZV09XCJ0cnVlXCIgW3N0eWxlLmhlaWdodC4lXT1cIjEwMFwiPjwvZGl2PlxuICBgLFxufSlcbmV4cG9ydCBjbGFzcyBCa0RvdWdobnV0Q2hhcnRDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG5cbiAgQElucHV0KCkgc2V0IGRhdGEoZGF0YSkge1xuICAgIHRoaXMuX2RhdGEgPSBkYXRhO1xuICAgIHRoaXMudXBkYXRlT3B0aW9ucygpO1xuICB9XG5cbiAgb3B0aW9uczogYW55ID0ge307XG5cbiAgcHJpdmF0ZSBfZGF0YSA9IFtdO1xuICBwcml2YXRlIGNvbG9yQ29uZmlnOiBhbnkgPSB7fTtcbiAgcHJpdmF0ZSBkZXN0cm95ZWQkOiBTdWJqZWN0PHZvaWQ+ID0gbmV3IFN1YmplY3QoKTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHRoZW1lOiBOYlRoZW1lU2VydmljZSkge1xuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy50aGVtZS5nZXRKc1RoZW1lKClcbiAgICAgIC5waXBlKHRha2VVbnRpbCh0aGlzLmRlc3Ryb3llZCQpKVxuICAgICAgLnN1YnNjcmliZSgoY29uZmlnOiBOYkpTVGhlbWVPcHRpb25zKSA9PiB7XG4gICAgICAgIHRoaXMuY29sb3JDb25maWcgPSBjb25maWcudmFyaWFibGVzLmNoYXJ0cztcbiAgICAgICAgdGhpcy51cGRhdGVPcHRpb25zKCk7XG4gICAgICB9KTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuZGVzdHJveWVkJC5uZXh0KCk7XG4gIH1cblxuICBwcml2YXRlIHVwZGF0ZU9wdGlvbnMoKSB7XG4gICAgdGhpcy5vcHRpb25zID0ge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGlzLmNvbG9yQ29uZmlnLmJnLFxuICAgICAgY29sb3I6IFtcbiAgICAgICAgdGhpcy5jb2xvckNvbmZpZy53YXJuaW5nLFxuICAgICAgICB0aGlzLmNvbG9yQ29uZmlnLmluZm8sXG4gICAgICAgIHRoaXMuY29sb3JDb25maWcuZGFuZ2VyLFxuICAgICAgICB0aGlzLmNvbG9yQ29uZmlnLnN1Y2Nlc3MsXG4gICAgICAgIHRoaXMuY29sb3JDb25maWcucHJpbWFyeSxcbiAgICAgIF0sXG4gICAgICB0b29sdGlwOiB7XG4gICAgICAgIHRyaWdnZXI6ICdpdGVtJyxcbiAgICAgICAgZm9ybWF0dGVyOiAne2F9IDxici8+e2J9OiB7Y30gKHtkfSUpJyxcbiAgICAgIH0sXG4gICAgICBsZWdlbmQ6IHtcbiAgICAgICAgb3JpZW50OiAndmVydGljYWwnLFxuICAgICAgICB4OiAnbGVmdCcsXG4gICAgICAgIGRhdGE6IFsnVVNBJywgJ0dlcm1hbnknLCAnRnJhbmNlJywgJ0NhbmFkYScsICdSdXNzaWEnXSxcbiAgICAgICAgdGV4dFN0eWxlOiB7XG4gICAgICAgICAgY29sb3I6IHRoaXMuY29sb3JDb25maWcudGV4dENvbG9yLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICAgIHNlcmllczogW1xuICAgICAgICB7XG4gICAgICAgICAgbmFtZTogJ0NvdW50cmllcycsXG4gICAgICAgICAgdHlwZTogJ3BpZScsXG4gICAgICAgICAgcmFkaXVzOiBbJzUwJScsICc3MCUnXSxcbiAgICAgICAgICBhdm9pZExhYmVsT3ZlcmxhcDogZmFsc2UsXG4gICAgICAgICAgbGFiZWw6IHtcbiAgICAgICAgICAgIG5vcm1hbDoge1xuICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcbiAgICAgICAgICAgICAgcG9zaXRpb246ICdjZW50ZXInLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVtcGhhc2lzOiB7XG4gICAgICAgICAgICAgIHNob3c6IHRydWUsXG4gICAgICAgICAgICAgIHRleHRTdHlsZToge1xuICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMjUnLFxuICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6ICdib2xkJyxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgICBkYXRhOiB0aGlzLl9kYXRhLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9O1xuICB9XG5cbn1cbiJdfQ==