/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Directive, ElementRef, NgZone } from '@angular/core';
import { Éµa as NgxEchartsDirective } from 'ngx-echarts';
// tslint:disable-next-line:directive-selector
export class EchartsDirective extends NgxEchartsDirective {
    /**
     * @param {?} element
     * @param {?} cd
     * @param {?} ngZone
     */
    constructor(element, cd, ngZone) {
        super(element, ngZone);
        this.element = element;
        this.cd = cd;
        this.alive = true;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.alive = false;
    }
    /**
     * @return {?}
     */
    ngDoCheck() {
        super.ngDoCheck();
        this.invalidate();
    }
    /**
     * Echarts work in a strange way, they're detecting if component visible or not
     * and only then trying to decide render chart or not.
     * In a number of cases like Nebular Tabset we have element already rendered but hidden for now.
     * And when we're trying to make it visible echarts doesn't react and stays not rendered.
     *
     * Invoking intersection observer on each doCheck provides us the ability to track
     * whether we need to update charts component or not.
     *
     * @private
     * @return {?}
     */
    invalidate() {
        /** @type {?} */
        const o = new IntersectionObserver((/**
         * @param {?} entries
         * @return {?}
         */
        (entries) => {
            const [entry] = entries;
            // Means component is visible
            if (entry.isIntersecting) {
                if (this.alive) {
                    this.cd.detectChanges();
                }
                o.disconnect();
            }
        }));
        o.observe(this.element.nativeElement);
    }
}
EchartsDirective.decorators = [
    { type: Directive, args: [{ selector: '[echarts]' },] }
];
/** @nocollapse */
EchartsDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: ChangeDetectorRef },
    { type: NgZone }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    EchartsDirective.prototype.alive;
    /**
     * @type {?}
     * @private
     */
    EchartsDirective.prototype.element;
    /**
     * @type {?}
     * @private
     */
    EchartsDirective.prototype.cd;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWNoYXJ0cy5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdWliYWtlcnkva2l0LyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvZWNoYXJ0cy9lY2hhcnRzLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLGlCQUFpQixFQUFFLFNBQVMsRUFBVyxVQUFVLEVBQUUsTUFBTSxFQUFhLE1BQU0sZUFBZSxDQUFDO0FBQ3JHLE9BQU8sRUFBRSxFQUFFLElBQUksbUJBQW1CLEVBQUUsTUFBTSxhQUFhLENBQUM7O0FBSXhELE1BQU0sT0FBTyxnQkFBaUIsU0FBUSxtQkFBbUI7Ozs7OztJQUl2RCxZQUFvQixPQUFtQixFQUFVLEVBQXFCLEVBQUUsTUFBYztRQUNwRixLQUFLLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBREwsWUFBTyxHQUFQLE9BQU8sQ0FBWTtRQUFVLE9BQUUsR0FBRixFQUFFLENBQW1CO1FBRjlELFVBQUssR0FBRyxJQUFJLENBQUM7SUFJckIsQ0FBQzs7OztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztJQUNyQixDQUFDOzs7O0lBRUQsU0FBUztRQUNQLEtBQUssQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUNsQixJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDcEIsQ0FBQzs7Ozs7Ozs7Ozs7OztJQVdPLFVBQVU7O2NBQ1YsQ0FBQyxHQUFHLElBQUksb0JBQW9COzs7O1FBQUMsQ0FBQyxPQUFvQyxFQUFFLEVBQUU7a0JBQ3BFLENBQUMsS0FBSyxDQUFDLEdBQUcsT0FBTztZQUV2Qiw2QkFBNkI7WUFDN0IsSUFBSSxLQUFLLENBQUMsY0FBYyxFQUFFO2dCQUN4QixJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7b0JBQ2QsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsQ0FBQztpQkFDekI7Z0JBQ0QsQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDO2FBQ2hCO1FBQ0gsQ0FBQyxFQUFDO1FBRUYsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQ3hDLENBQUM7OztZQXpDRixTQUFTLFNBQUMsRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFOzs7O1lBSlksVUFBVTtZQUFqRCxpQkFBaUI7WUFBa0MsTUFBTTs7Ozs7OztJQU9oRSxpQ0FBcUI7Ozs7O0lBRVQsbUNBQTJCOzs7OztJQUFFLDhCQUE2QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdG9yUmVmLCBEaXJlY3RpdmUsIERvQ2hlY2ssIEVsZW1lbnRSZWYsIE5nWm9uZSwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyDJtWEgYXMgTmd4RWNoYXJ0c0RpcmVjdGl2ZSB9IGZyb20gJ25neC1lY2hhcnRzJztcblxuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmRpcmVjdGl2ZS1zZWxlY3RvclxuQERpcmVjdGl2ZSh7IHNlbGVjdG9yOiAnW2VjaGFydHNdJyB9KVxuZXhwb3J0IGNsYXNzIEVjaGFydHNEaXJlY3RpdmUgZXh0ZW5kcyBOZ3hFY2hhcnRzRGlyZWN0aXZlIGltcGxlbWVudHMgRG9DaGVjaywgT25EZXN0cm95IHtcblxuICBwcml2YXRlIGFsaXZlID0gdHJ1ZTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsZW1lbnQ6IEVsZW1lbnRSZWYsIHByaXZhdGUgY2Q6IENoYW5nZURldGVjdG9yUmVmLCBuZ1pvbmU6IE5nWm9uZSkge1xuICAgIHN1cGVyKGVsZW1lbnQsIG5nWm9uZSk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLmFsaXZlID0gZmFsc2U7XG4gIH1cblxuICBuZ0RvQ2hlY2soKTogdm9pZCB7XG4gICAgc3VwZXIubmdEb0NoZWNrKCk7XG4gICAgdGhpcy5pbnZhbGlkYXRlKCk7XG4gIH1cblxuICAvKipcbiAgICogRWNoYXJ0cyB3b3JrIGluIGEgc3RyYW5nZSB3YXksIHRoZXkncmUgZGV0ZWN0aW5nIGlmIGNvbXBvbmVudCB2aXNpYmxlIG9yIG5vdFxuICAgKiBhbmQgb25seSB0aGVuIHRyeWluZyB0byBkZWNpZGUgcmVuZGVyIGNoYXJ0IG9yIG5vdC5cbiAgICogSW4gYSBudW1iZXIgb2YgY2FzZXMgbGlrZSBOZWJ1bGFyIFRhYnNldCB3ZSBoYXZlIGVsZW1lbnQgYWxyZWFkeSByZW5kZXJlZCBidXQgaGlkZGVuIGZvciBub3cuXG4gICAqIEFuZCB3aGVuIHdlJ3JlIHRyeWluZyB0byBtYWtlIGl0IHZpc2libGUgZWNoYXJ0cyBkb2Vzbid0IHJlYWN0IGFuZCBzdGF5cyBub3QgcmVuZGVyZWQuXG4gICAqXG4gICAqIEludm9raW5nIGludGVyc2VjdGlvbiBvYnNlcnZlciBvbiBlYWNoIGRvQ2hlY2sgcHJvdmlkZXMgdXMgdGhlIGFiaWxpdHkgdG8gdHJhY2tcbiAgICogd2hldGhlciB3ZSBuZWVkIHRvIHVwZGF0ZSBjaGFydHMgY29tcG9uZW50IG9yIG5vdC5cbiAgICogKi9cbiAgcHJpdmF0ZSBpbnZhbGlkYXRlKCkge1xuICAgIGNvbnN0IG8gPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoKGVudHJpZXM6IEludGVyc2VjdGlvbk9ic2VydmVyRW50cnlbXSkgPT4ge1xuICAgICAgY29uc3QgW2VudHJ5XSA9IGVudHJpZXM7XG5cbiAgICAgIC8vIE1lYW5zIGNvbXBvbmVudCBpcyB2aXNpYmxlXG4gICAgICBpZiAoZW50cnkuaXNJbnRlcnNlY3RpbmcpIHtcbiAgICAgICAgaWYgKHRoaXMuYWxpdmUpIHtcbiAgICAgICAgICB0aGlzLmNkLmRldGVjdENoYW5nZXMoKTtcbiAgICAgICAgfVxuICAgICAgICBvLmRpc2Nvbm5lY3QoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIG8ub2JzZXJ2ZSh0aGlzLmVsZW1lbnQubmF0aXZlRWxlbWVudCk7XG4gIH1cbn1cblxuIl19