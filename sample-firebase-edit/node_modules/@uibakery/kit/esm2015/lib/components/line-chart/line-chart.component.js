/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
import { NbThemeService } from '@nebular/theme';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
export class BkLineChartComponent {
    /**
     * @param {?} theme
     */
    constructor(theme) {
        this.theme = theme;
        this.options = {};
        this._data = { income: [], outcome: [], profit: [] };
        this.colorConfig = {};
        this.destroyed$ = new Subject();
    }
    /**
     * @param {?} data
     * @return {?}
     */
    set data(data) {
        this._data = data;
        this.updateOptions();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.theme.getJsTheme()
            .pipe(takeUntil(this.destroyed$))
            .subscribe((/**
         * @param {?} config
         * @return {?}
         */
        (config) => {
            this.colorConfig = config.variables.charts;
            this.updateOptions();
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.destroyed$.next();
    }
    /**
     * @private
     * @return {?}
     */
    updateOptions() {
        this.options = {
            backgroundColor: this.colorConfig.bg,
            color: [this.colorConfig.danger, this.colorConfig.primary, this.colorConfig.info],
            tooltip: {
                trigger: 'item',
                formatter: '{a} <br/>{b} : {c}',
            },
            xAxis: [
                {
                    type: 'category',
                    data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],
                    axisTick: {
                        alignWithLabel: true,
                    },
                    axisLine: {
                        lineStyle: {
                            color: this.colorConfig.axisLineColor,
                        },
                    },
                    axisLabel: {
                        textStyle: {
                            color: this.colorConfig.textColor,
                        },
                    },
                },
            ],
            yAxis: [
                {
                    axisLine: {
                        lineStyle: {
                            color: this.colorConfig.axisLineColor,
                        },
                    },
                    splitLine: {
                        lineStyle: {
                            color: this.colorConfig.splitLineColor,
                        },
                    },
                    axisLabel: {
                        textStyle: {
                            color: this.colorConfig.textColor,
                        },
                    },
                },
            ],
            grid: {
                left: '3%',
                right: '4%',
                bottom: '3%',
                containLabel: true,
            },
            series: [
                {
                    name: 'Income',
                    type: 'line',
                    data: this._data.income,
                },
                {
                    name: 'Outcome',
                    type: 'line',
                    data: this._data.outcome,
                },
                {
                    name: 'Profit',
                    type: 'line',
                    data: this._data.profit,
                },
            ],
        };
    }
}
BkLineChartComponent.decorators = [
    { type: Component, args: [{
                selector: 'bk-line-chart',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: `
    <div echarts [options]="options" [autoResize]="true" [style.height.%]="100"></div>
  `,
                styles: [':host { display: block }']
            }] }
];
/** @nocollapse */
BkLineChartComponent.ctorParameters = () => [
    { type: NbThemeService }
];
BkLineChartComponent.propDecorators = {
    data: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    BkLineChartComponent.prototype.options;
    /**
     * @type {?}
     * @private
     */
    BkLineChartComponent.prototype._data;
    /**
     * @type {?}
     * @private
     */
    BkLineChartComponent.prototype.colorConfig;
    /**
     * @type {?}
     * @private
     */
    BkLineChartComponent.prototype.destroyed$;
    /**
     * @type {?}
     * @private
     */
    BkLineChartComponent.prototype.theme;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGluZS1jaGFydC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdWliYWtlcnkva2l0LyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvbGluZS1jaGFydC9saW5lLWNoYXJ0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLHVCQUF1QixFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQXFCLE1BQU0sZUFBZSxDQUFDO0FBQzdGLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVoRCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQy9CLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQVkzQyxNQUFNLE9BQU8sb0JBQW9COzs7O0lBYS9CLFlBQW9CLEtBQXFCO1FBQXJCLFVBQUssR0FBTCxLQUFLLENBQWdCO1FBTnpDLFlBQU8sR0FBUSxFQUFFLENBQUM7UUFFVixVQUFLLEdBQTRDLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUUsQ0FBQztRQUN6RixnQkFBVyxHQUFRLEVBQUUsQ0FBQztRQUN0QixlQUFVLEdBQWtCLElBQUksT0FBTyxFQUFFLENBQUM7SUFHbEQsQ0FBQzs7Ozs7SUFaRCxJQUFhLElBQUksQ0FBQyxJQUE2QztRQUM3RCxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztRQUNsQixJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDdkIsQ0FBQzs7OztJQVdELFFBQVE7UUFDTixJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsRUFBRTthQUNwQixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQzthQUNoQyxTQUFTOzs7O1FBQUMsQ0FBQyxNQUF3QixFQUFFLEVBQUU7WUFDdEMsSUFBSSxDQUFDLFdBQVcsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQztZQUMzQyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDdkIsQ0FBQyxFQUFDLENBQUM7SUFDUCxDQUFDOzs7O0lBRUQsV0FBVztRQUNULElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDekIsQ0FBQzs7Ozs7SUFFTyxhQUFhO1FBQ25CLElBQUksQ0FBQyxPQUFPLEdBQUc7WUFDYixlQUFlLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFO1lBQ3BDLEtBQUssRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDO1lBQ2pGLE9BQU8sRUFBRTtnQkFDUCxPQUFPLEVBQUUsTUFBTTtnQkFDZixTQUFTLEVBQUUsb0JBQW9CO2FBQ2hDO1lBQ0QsS0FBSyxFQUFFO2dCQUNMO29CQUNFLElBQUksRUFBRSxVQUFVO29CQUNoQixJQUFJLEVBQUUsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUM7b0JBQ3ZELFFBQVEsRUFBRTt3QkFDUixjQUFjLEVBQUUsSUFBSTtxQkFDckI7b0JBQ0QsUUFBUSxFQUFFO3dCQUNSLFNBQVMsRUFBRTs0QkFDVCxLQUFLLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxhQUFhO3lCQUN0QztxQkFDRjtvQkFDRCxTQUFTLEVBQUU7d0JBQ1QsU0FBUyxFQUFFOzRCQUNULEtBQUssRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLFNBQVM7eUJBQ2xDO3FCQUNGO2lCQUNGO2FBQ0Y7WUFDRCxLQUFLLEVBQUU7Z0JBQ0w7b0JBQ0UsUUFBUSxFQUFFO3dCQUNSLFNBQVMsRUFBRTs0QkFDVCxLQUFLLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxhQUFhO3lCQUN0QztxQkFDRjtvQkFDRCxTQUFTLEVBQUU7d0JBQ1QsU0FBUyxFQUFFOzRCQUNULEtBQUssRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLGNBQWM7eUJBQ3ZDO3FCQUNGO29CQUNELFNBQVMsRUFBRTt3QkFDVCxTQUFTLEVBQUU7NEJBQ1QsS0FBSyxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUzt5QkFDbEM7cUJBQ0Y7aUJBQ0Y7YUFDRjtZQUNELElBQUksRUFBRTtnQkFDSixJQUFJLEVBQUUsSUFBSTtnQkFDVixLQUFLLEVBQUUsSUFBSTtnQkFDWCxNQUFNLEVBQUUsSUFBSTtnQkFDWixZQUFZLEVBQUUsSUFBSTthQUNuQjtZQUNELE1BQU0sRUFBRTtnQkFDTjtvQkFDRSxJQUFJLEVBQUUsUUFBUTtvQkFDZCxJQUFJLEVBQUUsTUFBTTtvQkFDWixJQUFJLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNO2lCQUN4QjtnQkFDRDtvQkFDRSxJQUFJLEVBQUUsU0FBUztvQkFDZixJQUFJLEVBQUUsTUFBTTtvQkFDWixJQUFJLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPO2lCQUN6QjtnQkFDRDtvQkFDRSxJQUFJLEVBQUUsUUFBUTtvQkFDZCxJQUFJLEVBQUUsTUFBTTtvQkFDWixJQUFJLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNO2lCQUN4QjthQUNGO1NBQ0YsQ0FBQztJQUNKLENBQUM7OztZQTdHRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGVBQWU7Z0JBQ3pCLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2dCQUkvQyxRQUFRLEVBQUU7O0dBRVQ7eUJBSkMsMEJBQTBCO2FBSzdCOzs7O1lBZFEsY0FBYzs7O21CQWlCcEIsS0FBSzs7OztJQUtOLHVDQUFrQjs7Ozs7SUFFbEIscUNBQWlHOzs7OztJQUNqRywyQ0FBOEI7Ozs7O0lBQzlCLDBDQUFrRDs7Ozs7SUFFdEMscUNBQTZCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgSW5wdXQsIE9uRGVzdHJveSwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOYlRoZW1lU2VydmljZSB9IGZyb20gJ0BuZWJ1bGFyL3RoZW1lJztcbmltcG9ydCB7IE5iSlNUaGVtZU9wdGlvbnMgfSBmcm9tICdAbmVidWxhci90aGVtZS9zZXJ2aWNlcy9qcy10aGVtZXMvdGhlbWUub3B0aW9ucyc7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyB0YWtlVW50aWwgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2JrLWxpbmUtY2hhcnQnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgc3R5bGVzOiBbXG4gICAgJzpob3N0IHsgZGlzcGxheTogYmxvY2sgfScsXG4gIF0sXG4gIHRlbXBsYXRlOiBgXG4gICAgPGRpdiBlY2hhcnRzIFtvcHRpb25zXT1cIm9wdGlvbnNcIiBbYXV0b1Jlc2l6ZV09XCJ0cnVlXCIgW3N0eWxlLmhlaWdodC4lXT1cIjEwMFwiPjwvZGl2PlxuICBgLFxufSlcbmV4cG9ydCBjbGFzcyBCa0xpbmVDaGFydENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcblxuICBASW5wdXQoKSBzZXQgZGF0YShkYXRhOiB7IGluY29tZTogW10sIG91dGNvbWU6IFtdLCBwcm9maXQ6IFtdIH0pIHtcbiAgICB0aGlzLl9kYXRhID0gZGF0YTtcbiAgICB0aGlzLnVwZGF0ZU9wdGlvbnMoKTtcbiAgfVxuXG4gIG9wdGlvbnM6IGFueSA9IHt9O1xuXG4gIHByaXZhdGUgX2RhdGE6IHsgaW5jb21lOiBbXSwgb3V0Y29tZTogW10sIHByb2ZpdDogW10gfSA9IHsgaW5jb21lOiBbXSwgb3V0Y29tZTogW10sIHByb2ZpdDogW10gfTtcbiAgcHJpdmF0ZSBjb2xvckNvbmZpZzogYW55ID0ge307XG4gIHByaXZhdGUgZGVzdHJveWVkJDogU3ViamVjdDx2b2lkPiA9IG5ldyBTdWJqZWN0KCk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSB0aGVtZTogTmJUaGVtZVNlcnZpY2UpIHtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMudGhlbWUuZ2V0SnNUaGVtZSgpXG4gICAgICAucGlwZSh0YWtlVW50aWwodGhpcy5kZXN0cm95ZWQkKSlcbiAgICAgIC5zdWJzY3JpYmUoKGNvbmZpZzogTmJKU1RoZW1lT3B0aW9ucykgPT4ge1xuICAgICAgICB0aGlzLmNvbG9yQ29uZmlnID0gY29uZmlnLnZhcmlhYmxlcy5jaGFydHM7XG4gICAgICAgIHRoaXMudXBkYXRlT3B0aW9ucygpO1xuICAgICAgfSk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLmRlc3Ryb3llZCQubmV4dCgpO1xuICB9XG5cbiAgcHJpdmF0ZSB1cGRhdGVPcHRpb25zKCkge1xuICAgIHRoaXMub3B0aW9ucyA9IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhpcy5jb2xvckNvbmZpZy5iZyxcbiAgICAgIGNvbG9yOiBbdGhpcy5jb2xvckNvbmZpZy5kYW5nZXIsIHRoaXMuY29sb3JDb25maWcucHJpbWFyeSwgdGhpcy5jb2xvckNvbmZpZy5pbmZvXSxcbiAgICAgIHRvb2x0aXA6IHtcbiAgICAgICAgdHJpZ2dlcjogJ2l0ZW0nLFxuICAgICAgICBmb3JtYXR0ZXI6ICd7YX0gPGJyLz57Yn0gOiB7Y30nLFxuICAgICAgfSxcbiAgICAgIHhBeGlzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiAnY2F0ZWdvcnknLFxuICAgICAgICAgIGRhdGE6IFsnTW9uJywgJ1R1ZScsICdXZWQnLCAnVGh1JywgJ0ZyaScsICdTYXQnLCAnU3VuJ10sXG4gICAgICAgICAgYXhpc1RpY2s6IHtcbiAgICAgICAgICAgIGFsaWduV2l0aExhYmVsOiB0cnVlLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgYXhpc0xpbmU6IHtcbiAgICAgICAgICAgIGxpbmVTdHlsZToge1xuICAgICAgICAgICAgICBjb2xvcjogdGhpcy5jb2xvckNvbmZpZy5heGlzTGluZUNvbG9yLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICAgIGF4aXNMYWJlbDoge1xuICAgICAgICAgICAgdGV4dFN0eWxlOiB7XG4gICAgICAgICAgICAgIGNvbG9yOiB0aGlzLmNvbG9yQ29uZmlnLnRleHRDb2xvcixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgICB5QXhpczogW1xuICAgICAgICB7XG4gICAgICAgICAgYXhpc0xpbmU6IHtcbiAgICAgICAgICAgIGxpbmVTdHlsZToge1xuICAgICAgICAgICAgICBjb2xvcjogdGhpcy5jb2xvckNvbmZpZy5heGlzTGluZUNvbG9yLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICAgIHNwbGl0TGluZToge1xuICAgICAgICAgICAgbGluZVN0eWxlOiB7XG4gICAgICAgICAgICAgIGNvbG9yOiB0aGlzLmNvbG9yQ29uZmlnLnNwbGl0TGluZUNvbG9yLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICAgIGF4aXNMYWJlbDoge1xuICAgICAgICAgICAgdGV4dFN0eWxlOiB7XG4gICAgICAgICAgICAgIGNvbG9yOiB0aGlzLmNvbG9yQ29uZmlnLnRleHRDb2xvcixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgICBncmlkOiB7XG4gICAgICAgIGxlZnQ6ICczJScsXG4gICAgICAgIHJpZ2h0OiAnNCUnLFxuICAgICAgICBib3R0b206ICczJScsXG4gICAgICAgIGNvbnRhaW5MYWJlbDogdHJ1ZSxcbiAgICAgIH0sXG4gICAgICBzZXJpZXM6IFtcbiAgICAgICAge1xuICAgICAgICAgIG5hbWU6ICdJbmNvbWUnLFxuICAgICAgICAgIHR5cGU6ICdsaW5lJyxcbiAgICAgICAgICBkYXRhOiB0aGlzLl9kYXRhLmluY29tZSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIG5hbWU6ICdPdXRjb21lJyxcbiAgICAgICAgICB0eXBlOiAnbGluZScsXG4gICAgICAgICAgZGF0YTogdGhpcy5fZGF0YS5vdXRjb21lLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgbmFtZTogJ1Byb2ZpdCcsXG4gICAgICAgICAgdHlwZTogJ2xpbmUnLFxuICAgICAgICAgIGRhdGE6IHRoaXMuX2RhdGEucHJvZml0LFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9O1xuICB9XG5cbn1cbiJdfQ==