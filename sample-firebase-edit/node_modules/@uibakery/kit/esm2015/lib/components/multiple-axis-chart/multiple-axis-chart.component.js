/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
import { NbThemeService } from '@nebular/theme';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
export class BkMultipleAxisChartComponent {
    /**
     * @param {?} theme
     */
    constructor(theme) {
        this.theme = theme;
        this.options = {};
        this._data = { firstDataset: [], secondDataset: [] };
        this.colorConfig = {};
        this.destroyed$ = new Subject();
    }
    /**
     * @param {?} data
     * @return {?}
     */
    set data(data) {
        this._data = data;
        this.updateOptions();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.theme.getJsTheme()
            .pipe(takeUntil(this.destroyed$))
            .subscribe((/**
         * @param {?} config
         * @return {?}
         */
        (config) => {
            this.colorConfig = config.variables.charts;
            this.updateOptions();
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.destroyed$.next();
    }
    /**
     * @private
     * @return {?}
     */
    updateOptions() {
        this.options = {
            backgroundColor: this.colorConfig.bg,
            color: [
                this.colorConfig.primary,
                this.colorConfig.info,
            ],
            tooltip: {
                trigger: 'axis',
                axisPointer: {
                    type: 'cross',
                },
            },
            legend: {
                data: ['First Dataset', 'Second Dataset'],
                textStyle: {
                    color: this.colorConfig.textColor,
                },
            },
            xAxis: [
                {
                    type: 'category',
                    axisTick: {
                        alignWithLabel: true,
                    },
                    data: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],
                    axisLine: {
                        lineStyle: {
                            color: this.colorConfig.axisLineColor,
                        },
                    },
                    splitLine: {
                        lineStyle: {
                            color: this.colorConfig.splitLineColor,
                        },
                    },
                    axisLabel: {
                        textStyle: {
                            color: this.colorConfig.textColor,
                        },
                    },
                },
            ],
            yAxis: [
                {
                    type: 'value',
                    name: 'First Dataset',
                    min: -90,
                    max: 60,
                    position: 'left',
                    axisLine: {
                        lineStyle: {
                            color: this.colorConfig.primary,
                        },
                    },
                    axisLabel: {
                        formatter: '{value} °C',
                    },
                },
                {
                    type: 'value',
                    name: 'Second Dataset',
                    min: -90,
                    max: 80,
                    position: 'right',
                    axisLine: {
                        lineStyle: {
                            color: this.colorConfig.danger,
                        },
                    },
                    axisLabel: {
                        formatter: '{value} °C',
                    },
                    splitLine: {
                        show: false,
                    },
                },
            ],
            series: [
                {
                    name: 'First Dataset',
                    type: 'line',
                    yAxisIndex: 0,
                    smooth: true,
                    itemStyle: { color: this.colorConfig.primary },
                    data: this._data.firstDataset,
                },
                {
                    name: 'Second Dataset',
                    type: 'line',
                    yAxisIndex: 1,
                    smooth: true,
                    itemStyle: { color: this.colorConfig.danger },
                    data: this._data.secondDataset,
                },
            ],
        };
    }
}
BkMultipleAxisChartComponent.decorators = [
    { type: Component, args: [{
                selector: 'bk-multiple-axis-chart',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: `
    <div echarts [options]="options" [autoResize]="true" [style.height.%]="100"></div>
  `,
                styles: [':host { display: block }']
            }] }
];
/** @nocollapse */
BkMultipleAxisChartComponent.ctorParameters = () => [
    { type: NbThemeService }
];
BkMultipleAxisChartComponent.propDecorators = {
    data: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    BkMultipleAxisChartComponent.prototype.options;
    /**
     * @type {?}
     * @private
     */
    BkMultipleAxisChartComponent.prototype._data;
    /**
     * @type {?}
     * @private
     */
    BkMultipleAxisChartComponent.prototype.colorConfig;
    /**
     * @type {?}
     * @private
     */
    BkMultipleAxisChartComponent.prototype.destroyed$;
    /**
     * @type {?}
     * @private
     */
    BkMultipleAxisChartComponent.prototype.theme;
}
//# sourceMappingURL=data:application/json;base64,