/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
import { NbThemeService } from '@nebular/theme';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
export class BkMultipleBarChartComponent {
    /**
     * @param {?} theme
     */
    constructor(theme) {
        this.theme = theme;
        this.options = {};
        this._data = { firstDataset: [], secondDataset: [] };
        this.colorConfig = {};
        this.destroyed$ = new Subject();
    }
    /**
     * @param {?} data
     * @return {?}
     */
    set data(data) {
        this._data = data;
        this.updateOptions();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.theme.getJsTheme()
            .pipe(takeUntil(this.destroyed$))
            .subscribe((/**
         * @param {?} config
         * @return {?}
         */
        (config) => {
            this.colorConfig = config.variables.charts;
            this.updateOptions();
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.destroyed$.next();
    }
    /**
     * @private
     * @return {?}
     */
    updateOptions() {
        this.options = {
            backgroundColor: this.colorConfig.bg,
            color: [this.colorConfig.primary],
            legend: {
                data: ['First Dataset', 'Second Dataset'],
                textStyle: {
                    color: this.colorConfig.textColor,
                },
            },
            tooltip: {
                trigger: 'axis',
                axisPointer: {
                    type: 'shadow',
                },
            },
            grid: {
                left: '3%',
                right: '4%',
                bottom: '3%',
                containLabel: true,
            },
            xAxis: [
                {
                    type: 'category',
                    data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],
                    axisTick: {
                        alignWithLabel: true,
                    },
                    axisLine: {
                        lineStyle: {
                            color: this.colorConfig.axisLineColor,
                        },
                    },
                    axisLabel: {
                        textStyle: {
                            color: this.colorConfig.textColor,
                        },
                    },
                },
            ],
            yAxis: [
                {
                    type: 'value',
                    axisLine: {
                        lineStyle: {
                            color: this.colorConfig.axisLineColor,
                        },
                    },
                    splitLine: {
                        lineStyle: {
                            color: this.colorConfig.splitLineColor,
                        },
                    },
                    axisLabel: {
                        textStyle: {
                            color: this.colorConfig.textColor,
                        },
                    },
                },
            ],
            series: [
                {
                    name: 'First Dataset',
                    type: 'bar',
                    itemStyle: { color: this.colorConfig.primary },
                    data: this._data.firstDataset,
                },
                {
                    name: 'Second Dataset',
                    type: 'bar',
                    itemStyle: { color: this.colorConfig.danger },
                    data: this._data.secondDataset,
                },
            ],
        };
    }
}
BkMultipleBarChartComponent.decorators = [
    { type: Component, args: [{
                selector: 'bk-multiple-bar-chart',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: `
    <div echarts [options]="options" [autoResize]="true" [style.height.%]="100"></div>
  `,
                styles: [':host { display: block }']
            }] }
];
/** @nocollapse */
BkMultipleBarChartComponent.ctorParameters = () => [
    { type: NbThemeService }
];
BkMultipleBarChartComponent.propDecorators = {
    data: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    BkMultipleBarChartComponent.prototype.options;
    /**
     * @type {?}
     * @private
     */
    BkMultipleBarChartComponent.prototype._data;
    /**
     * @type {?}
     * @private
     */
    BkMultipleBarChartComponent.prototype.colorConfig;
    /**
     * @type {?}
     * @private
     */
    BkMultipleBarChartComponent.prototype.destroyed$;
    /**
     * @type {?}
     * @private
     */
    BkMultipleBarChartComponent.prototype.theme;
}
//# sourceMappingURL=data:application/json;base64,