/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
import { NbThemeService } from '@nebular/theme';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
export class BkPieChartComponent {
    /**
     * @param {?} theme
     */
    constructor(theme) {
        this.theme = theme;
        this.options = {};
        this._data = [];
        this.colorConfig = {};
        this.destroyed$ = new Subject();
    }
    /**
     * @param {?} data
     * @return {?}
     */
    set data(data) {
        this._data = data;
        this.updateOptions();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.theme.getJsTheme()
            .pipe(takeUntil(this.destroyed$))
            .subscribe((/**
         * @param {?} config
         * @return {?}
         */
        (config) => {
            this.colorConfig = config.variables.charts;
            this.updateOptions();
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.destroyed$.next();
    }
    /**
     * @private
     * @return {?}
     */
    updateOptions() {
        this.options = {
            backgroundColor: this.colorConfig.bg,
            color: [
                this.colorConfig.warning,
                this.colorConfig.info,
                this.colorConfig.danger,
                this.colorConfig.success,
                this.colorConfig.primary,
            ],
            tooltip: {
                trigger: 'item',
                formatter: '{a} <br/>{b} : {c} ({d}%)',
            },
            legend: {
                orient: 'vertical',
                left: 'left',
                data: ['USA', 'Germany', 'France', 'Canada', 'Russia'],
                textStyle: {
                    color: this.colorConfig.textColor,
                },
            },
            series: [
                {
                    name: 'Countries',
                    type: 'pie',
                    radius: '80%',
                    center: ['50%', '50%'],
                    data: this._data,
                    itemStyle: {
                        emphasis: {
                            shadowBlur: 10,
                            shadowOffsetX: 0,
                            shadowColor: this.colorConfig.itemHoverShadowColor,
                        },
                    },
                    label: {
                        normal: {
                            textStyle: {
                                color: this.colorConfig.textColor,
                            },
                        },
                    },
                    labelLine: {
                        normal: {
                            lineStyle: {
                                color: this.colorConfig.axisLineColor,
                            },
                        },
                    },
                },
            ],
        };
    }
}
BkPieChartComponent.decorators = [
    { type: Component, args: [{
                selector: 'bk-pie-chart',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: `
    <div echarts [options]="options" [autoResize]="true" [style.height.%]="100"></div>
  `,
                styles: [':host { display: block }']
            }] }
];
/** @nocollapse */
BkPieChartComponent.ctorParameters = () => [
    { type: NbThemeService }
];
BkPieChartComponent.propDecorators = {
    data: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    BkPieChartComponent.prototype.options;
    /**
     * @type {?}
     * @private
     */
    BkPieChartComponent.prototype._data;
    /**
     * @type {?}
     * @private
     */
    BkPieChartComponent.prototype.colorConfig;
    /**
     * @type {?}
     * @private
     */
    BkPieChartComponent.prototype.destroyed$;
    /**
     * @type {?}
     * @private
     */
    BkPieChartComponent.prototype.theme;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGllLWNoYXJ0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B1aWJha2VyeS9raXQvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9waWUtY2hhcnQvcGllLWNoYXJ0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLHVCQUF1QixFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQXFCLE1BQU0sZUFBZSxDQUFDO0FBQzdGLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVoRCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQy9CLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQVkzQyxNQUFNLE9BQU8sbUJBQW1COzs7O0lBYTlCLFlBQW9CLEtBQXFCO1FBQXJCLFVBQUssR0FBTCxLQUFLLENBQWdCO1FBTnpDLFlBQU8sR0FBUSxFQUFFLENBQUM7UUFFVixVQUFLLEdBQUcsRUFBRSxDQUFDO1FBQ1gsZ0JBQVcsR0FBUSxFQUFFLENBQUM7UUFDdEIsZUFBVSxHQUFrQixJQUFJLE9BQU8sRUFBRSxDQUFDO0lBR2xELENBQUM7Ozs7O0lBWkQsSUFBYSxJQUFJLENBQUMsSUFBSTtRQUNwQixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztRQUNsQixJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDdkIsQ0FBQzs7OztJQVdELFFBQVE7UUFDTixJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsRUFBRTthQUNwQixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQzthQUNoQyxTQUFTOzs7O1FBQUMsQ0FBQyxNQUF3QixFQUFFLEVBQUU7WUFDdEMsSUFBSSxDQUFDLFdBQVcsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQztZQUMzQyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDdkIsQ0FBQyxFQUFDLENBQUM7SUFDUCxDQUFDOzs7O0lBRUQsV0FBVztRQUNULElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDekIsQ0FBQzs7Ozs7SUFFTyxhQUFhO1FBQ25CLElBQUksQ0FBQyxPQUFPLEdBQUc7WUFDYixlQUFlLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFO1lBQ3BDLEtBQUssRUFBRTtnQkFDTCxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU87Z0JBQ3hCLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSTtnQkFDckIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNO2dCQUN2QixJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU87Z0JBQ3hCLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTzthQUN6QjtZQUNELE9BQU8sRUFBRTtnQkFDUCxPQUFPLEVBQUUsTUFBTTtnQkFDZixTQUFTLEVBQUUsMkJBQTJCO2FBQ3ZDO1lBQ0QsTUFBTSxFQUFFO2dCQUNOLE1BQU0sRUFBRSxVQUFVO2dCQUNsQixJQUFJLEVBQUUsTUFBTTtnQkFDWixJQUFJLEVBQUUsQ0FBQyxLQUFLLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsUUFBUSxDQUFDO2dCQUN0RCxTQUFTLEVBQUU7b0JBQ1QsS0FBSyxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUztpQkFDbEM7YUFDRjtZQUNELE1BQU0sRUFBRTtnQkFDTjtvQkFDRSxJQUFJLEVBQUUsV0FBVztvQkFDakIsSUFBSSxFQUFFLEtBQUs7b0JBQ1gsTUFBTSxFQUFFLEtBQUs7b0JBQ2IsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQztvQkFDdEIsSUFBSSxFQUFFLElBQUksQ0FBQyxLQUFLO29CQUNoQixTQUFTLEVBQUU7d0JBQ1QsUUFBUSxFQUFFOzRCQUNSLFVBQVUsRUFBRSxFQUFFOzRCQUNkLGFBQWEsRUFBRSxDQUFDOzRCQUNoQixXQUFXLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxvQkFBb0I7eUJBQ25EO3FCQUNGO29CQUNELEtBQUssRUFBRTt3QkFDTCxNQUFNLEVBQUU7NEJBQ04sU0FBUyxFQUFFO2dDQUNULEtBQUssRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLFNBQVM7NkJBQ2xDO3lCQUNGO3FCQUNGO29CQUNELFNBQVMsRUFBRTt3QkFDVCxNQUFNLEVBQUU7NEJBQ04sU0FBUyxFQUFFO2dDQUNULEtBQUssRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWE7NkJBQ3RDO3lCQUNGO3FCQUNGO2lCQUNGO2FBQ0Y7U0FDRixDQUFDO0lBQ0osQ0FBQzs7O1lBNUZGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsY0FBYztnQkFDeEIsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07Z0JBSS9DLFFBQVEsRUFBRTs7R0FFVDt5QkFKQywwQkFBMEI7YUFLN0I7Ozs7WUFkUSxjQUFjOzs7bUJBaUJwQixLQUFLOzs7O0lBS04sc0NBQWtCOzs7OztJQUVsQixvQ0FBbUI7Ozs7O0lBQ25CLDBDQUE4Qjs7Ozs7SUFDOUIseUNBQWtEOzs7OztJQUV0QyxvQ0FBNkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBJbnB1dCwgT25EZXN0cm95LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5iVGhlbWVTZXJ2aWNlIH0gZnJvbSAnQG5lYnVsYXIvdGhlbWUnO1xuaW1wb3J0IHsgTmJKU1RoZW1lT3B0aW9ucyB9IGZyb20gJ0BuZWJ1bGFyL3RoZW1lL3NlcnZpY2VzL2pzLXRoZW1lcy90aGVtZS5vcHRpb25zJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IHRha2VVbnRpbCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYmstcGllLWNoYXJ0JyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHN0eWxlczogW1xuICAgICc6aG9zdCB7IGRpc3BsYXk6IGJsb2NrIH0nLFxuICBdLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxkaXYgZWNoYXJ0cyBbb3B0aW9uc109XCJvcHRpb25zXCIgW2F1dG9SZXNpemVdPVwidHJ1ZVwiIFtzdHlsZS5oZWlnaHQuJV09XCIxMDBcIj48L2Rpdj5cbiAgYCxcbn0pXG5leHBvcnQgY2xhc3MgQmtQaWVDaGFydENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcblxuICBASW5wdXQoKSBzZXQgZGF0YShkYXRhKSB7XG4gICAgdGhpcy5fZGF0YSA9IGRhdGE7XG4gICAgdGhpcy51cGRhdGVPcHRpb25zKCk7XG4gIH1cblxuICBvcHRpb25zOiBhbnkgPSB7fTtcblxuICBwcml2YXRlIF9kYXRhID0gW107XG4gIHByaXZhdGUgY29sb3JDb25maWc6IGFueSA9IHt9O1xuICBwcml2YXRlIGRlc3Ryb3llZCQ6IFN1YmplY3Q8dm9pZD4gPSBuZXcgU3ViamVjdCgpO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgdGhlbWU6IE5iVGhlbWVTZXJ2aWNlKSB7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLnRoZW1lLmdldEpzVGhlbWUoKVxuICAgICAgLnBpcGUodGFrZVVudGlsKHRoaXMuZGVzdHJveWVkJCkpXG4gICAgICAuc3Vic2NyaWJlKChjb25maWc6IE5iSlNUaGVtZU9wdGlvbnMpID0+IHtcbiAgICAgICAgdGhpcy5jb2xvckNvbmZpZyA9IGNvbmZpZy52YXJpYWJsZXMuY2hhcnRzO1xuICAgICAgICB0aGlzLnVwZGF0ZU9wdGlvbnMoKTtcbiAgICAgIH0pO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5kZXN0cm95ZWQkLm5leHQoKTtcbiAgfVxuXG4gIHByaXZhdGUgdXBkYXRlT3B0aW9ucygpIHtcbiAgICB0aGlzLm9wdGlvbnMgPSB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoaXMuY29sb3JDb25maWcuYmcsXG4gICAgICBjb2xvcjogW1xuICAgICAgICB0aGlzLmNvbG9yQ29uZmlnLndhcm5pbmcsXG4gICAgICAgIHRoaXMuY29sb3JDb25maWcuaW5mbyxcbiAgICAgICAgdGhpcy5jb2xvckNvbmZpZy5kYW5nZXIsXG4gICAgICAgIHRoaXMuY29sb3JDb25maWcuc3VjY2VzcyxcbiAgICAgICAgdGhpcy5jb2xvckNvbmZpZy5wcmltYXJ5LFxuICAgICAgXSxcbiAgICAgIHRvb2x0aXA6IHtcbiAgICAgICAgdHJpZ2dlcjogJ2l0ZW0nLFxuICAgICAgICBmb3JtYXR0ZXI6ICd7YX0gPGJyLz57Yn0gOiB7Y30gKHtkfSUpJyxcbiAgICAgIH0sXG4gICAgICBsZWdlbmQ6IHtcbiAgICAgICAgb3JpZW50OiAndmVydGljYWwnLFxuICAgICAgICBsZWZ0OiAnbGVmdCcsXG4gICAgICAgIGRhdGE6IFsnVVNBJywgJ0dlcm1hbnknLCAnRnJhbmNlJywgJ0NhbmFkYScsICdSdXNzaWEnXSxcbiAgICAgICAgdGV4dFN0eWxlOiB7XG4gICAgICAgICAgY29sb3I6IHRoaXMuY29sb3JDb25maWcudGV4dENvbG9yLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICAgIHNlcmllczogW1xuICAgICAgICB7XG4gICAgICAgICAgbmFtZTogJ0NvdW50cmllcycsXG4gICAgICAgICAgdHlwZTogJ3BpZScsXG4gICAgICAgICAgcmFkaXVzOiAnODAlJyxcbiAgICAgICAgICBjZW50ZXI6IFsnNTAlJywgJzUwJSddLFxuICAgICAgICAgIGRhdGE6IHRoaXMuX2RhdGEsXG4gICAgICAgICAgaXRlbVN0eWxlOiB7XG4gICAgICAgICAgICBlbXBoYXNpczoge1xuICAgICAgICAgICAgICBzaGFkb3dCbHVyOiAxMCxcbiAgICAgICAgICAgICAgc2hhZG93T2Zmc2V0WDogMCxcbiAgICAgICAgICAgICAgc2hhZG93Q29sb3I6IHRoaXMuY29sb3JDb25maWcuaXRlbUhvdmVyU2hhZG93Q29sb3IsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgICAgbGFiZWw6IHtcbiAgICAgICAgICAgIG5vcm1hbDoge1xuICAgICAgICAgICAgICB0ZXh0U3R5bGU6IHtcbiAgICAgICAgICAgICAgICBjb2xvcjogdGhpcy5jb2xvckNvbmZpZy50ZXh0Q29sb3IsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgICAgbGFiZWxMaW5lOiB7XG4gICAgICAgICAgICBub3JtYWw6IHtcbiAgICAgICAgICAgICAgbGluZVN0eWxlOiB7XG4gICAgICAgICAgICAgICAgY29sb3I6IHRoaXMuY29sb3JDb25maWcuYXhpc0xpbmVDb2xvcixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgfTtcbiAgfVxuXG59XG4iXX0=