/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { HttpClient } from '@angular/common/http';
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Input } from '@angular/core';
import { NbThemeService } from '@nebular/theme';
import { registerMap } from 'echarts';
import { combineLatest, Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
var BkBubbleMapComponent = /** @class */ (function () {
    function BkBubbleMapComponent(theme, http, cd) {
        this.theme = theme;
        this.http = http;
        this.cd = cd;
        this.options = {};
        this._data = { countryCoordinates: [], mapData: [] };
        this.colorConfig = {};
        this.geoColors = [];
        this.countryColorMap = {};
        this.max = -Infinity;
        this.destroyed$ = new Subject();
    }
    Object.defineProperty(BkBubbleMapComponent.prototype, "data", {
        set: /**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            this._data = data;
            // avoid showing map without colors
            if (this.initialized) {
                this.updateOptions();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    BkBubbleMapComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        combineLatest([
            this.http.get('assets/map/world.json'),
            this.theme.getJsTheme(),
        ])
            .pipe(takeUntil(this.destroyed$))
            .subscribe((/**
         * @param {?} __0
         * @return {?}
         */
        function (_a) {
            var _b = tslib_1.__read(_a, 2), map = _b[0], config = _b[1];
            registerMap('world', map);
            _this.initColors(config);
            _this.updateOptions();
            _this.initialized = true;
            _this.cd.detectChanges();
        }));
    };
    /**
     * @return {?}
     */
    BkBubbleMapComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.destroyed$.next();
    };
    /**
     * @private
     * @param {?} config
     * @return {?}
     */
    BkBubbleMapComponent.prototype.initColors = /**
     * @private
     * @param {?} config
     * @return {?}
     */
    function (config) {
        var _this = this;
        this.colorConfig = config.variables.bubbleMap;
        this.geoColors = [
            this.colorConfig.primary,
            this.colorConfig.info,
            this.colorConfig.success,
            this.colorConfig.warning,
            this.colorConfig.danger,
        ];
        this._data.mapData.forEach((/**
         * @param {?} itemOpt
         * @return {?}
         */
        function (itemOpt) {
            _this.countryColorMap[itemOpt.name] = _this.getRandomGeoColor();
        }));
    };
    /**
     * @private
     * @return {?}
     */
    BkBubbleMapComponent.prototype.updateOptions = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this._data.mapData.forEach((/**
         * @param {?} itemOpt
         * @return {?}
         */
        function (itemOpt) {
            if (itemOpt.value > _this.max) {
                _this.max = itemOpt.value;
            }
        }));
        this.options = {
            title: {
                text: 'World Population (2011)',
                left: 'center',
                top: 'top',
                textStyle: {
                    color: this.colorConfig.titleColor,
                },
            },
            tooltip: {
                trigger: 'item',
                formatter: (/**
                 * @param {?} params
                 * @return {?}
                 */
                function (params) {
                    return params.name + ': ' + params.value[2];
                }),
            },
            visualMap: {
                show: false,
                min: 0,
                max: this.max,
                inRange: {
                    symbolSize: [6, 60],
                },
            },
            geo: {
                name: 'World Population (2010)',
                type: 'map',
                map: 'world',
                roam: true,
                label: {
                    emphasis: {
                        show: false,
                    },
                },
                itemStyle: {
                    normal: {
                        areaColor: this.colorConfig.areaColor,
                        borderColor: this.colorConfig.areaBorderColor,
                    },
                    emphasis: {
                        areaColor: this.colorConfig.areaHoverColor,
                    },
                },
                zoom: 1.1,
            },
            series: [
                {
                    type: 'scatter',
                    coordinateSystem: 'geo',
                    data: this._data.mapData.map((/**
                     * @param {?} itemOpt
                     * @return {?}
                     */
                    function (itemOpt) {
                        return {
                            name: itemOpt.name,
                            value: [
                                _this._data.countryCoordinates[itemOpt.code].longitude,
                                _this._data.countryCoordinates[itemOpt.code].latitude,
                                itemOpt.value,
                            ],
                            itemStyle: {
                                normal: {
                                    color: _this.getCountryColor(itemOpt.name),
                                },
                            },
                        };
                    })),
                },
            ],
        };
    };
    /**
     * @private
     * @param {?} countryName
     * @return {?}
     */
    BkBubbleMapComponent.prototype.getCountryColor = /**
     * @private
     * @param {?} countryName
     * @return {?}
     */
    function (countryName) {
        /** @type {?} */
        var color = this.countryColorMap[countryName];
        if (color) {
            return color;
        }
        /** @type {?} */
        var generatedColor = this.getRandomGeoColor();
        this.countryColorMap[countryName] = generatedColor;
        return generatedColor;
    };
    /**
     * @private
     * @return {?}
     */
    BkBubbleMapComponent.prototype.getRandomGeoColor = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var index = Math.round(Math.random() * this.geoColors.length);
        return this.geoColors[index];
    };
    BkBubbleMapComponent.decorators = [
        { type: Component, args: [{
                    selector: 'bk-bubble-map',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: "\n    <div echarts [options]=\"options\" [autoResize]=\"true\" [style.height.%]=\"100\"></div>\n  ",
                    styles: [':host { display: block }']
                }] }
    ];
    /** @nocollapse */
    BkBubbleMapComponent.ctorParameters = function () { return [
        { type: NbThemeService },
        { type: HttpClient },
        { type: ChangeDetectorRef }
    ]; };
    BkBubbleMapComponent.propDecorators = {
        data: [{ type: Input }]
    };
    return BkBubbleMapComponent;
}());
export { BkBubbleMapComponent };
if (false) {
    /** @type {?} */
    BkBubbleMapComponent.prototype.options;
    /**
     * @type {?}
     * @private
     */
    BkBubbleMapComponent.prototype._data;
    /**
     * @type {?}
     * @private
     */
    BkBubbleMapComponent.prototype.colorConfig;
    /**
     * @type {?}
     * @private
     */
    BkBubbleMapComponent.prototype.geoColors;
    /**
     * @type {?}
     * @private
     */
    BkBubbleMapComponent.prototype.countryColorMap;
    /**
     * @type {?}
     * @private
     */
    BkBubbleMapComponent.prototype.max;
    /**
     * @type {?}
     * @private
     */
    BkBubbleMapComponent.prototype.initialized;
    /**
     * @type {?}
     * @private
     */
    BkBubbleMapComponent.prototype.destroyed$;
    /**
     * @type {?}
     * @private
     */
    BkBubbleMapComponent.prototype.theme;
    /**
     * @type {?}
     * @private
     */
    BkBubbleMapComponent.prototype.http;
    /**
     * @type {?}
     * @private
     */
    BkBubbleMapComponent.prototype.cd;
}
//# sourceMappingURL=data:application/json;base64,