/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
import { NbThemeService } from '@nebular/theme';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
var BkDoughnutChartComponent = /** @class */ (function () {
    function BkDoughnutChartComponent(theme) {
        this.theme = theme;
        this.options = {};
        this._data = [];
        this.colorConfig = {};
        this.destroyed$ = new Subject();
    }
    Object.defineProperty(BkDoughnutChartComponent.prototype, "data", {
        set: /**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            this._data = data;
            this.updateOptions();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    BkDoughnutChartComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.theme.getJsTheme()
            .pipe(takeUntil(this.destroyed$))
            .subscribe((/**
         * @param {?} config
         * @return {?}
         */
        function (config) {
            _this.colorConfig = config.variables.charts;
            _this.updateOptions();
        }));
    };
    /**
     * @return {?}
     */
    BkDoughnutChartComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.destroyed$.next();
    };
    /**
     * @private
     * @return {?}
     */
    BkDoughnutChartComponent.prototype.updateOptions = /**
     * @private
     * @return {?}
     */
    function () {
        this.options = {
            backgroundColor: this.colorConfig.bg,
            color: [
                this.colorConfig.warning,
                this.colorConfig.info,
                this.colorConfig.danger,
                this.colorConfig.success,
                this.colorConfig.primary,
            ],
            tooltip: {
                trigger: 'item',
                formatter: '{a} <br/>{b}: {c} ({d}%)',
            },
            legend: {
                orient: 'vertical',
                x: 'left',
                data: ['USA', 'Germany', 'France', 'Canada', 'Russia'],
                textStyle: {
                    color: this.colorConfig.textColor,
                },
            },
            series: [
                {
                    name: 'Countries',
                    type: 'pie',
                    radius: ['50%', '70%'],
                    avoidLabelOverlap: false,
                    label: {
                        normal: {
                            show: false,
                            position: 'center',
                        },
                        emphasis: {
                            show: true,
                            textStyle: {
                                fontSize: '25',
                                fontWeight: 'bold',
                            },
                        },
                    },
                    data: this._data,
                },
            ],
        };
    };
    BkDoughnutChartComponent.decorators = [
        { type: Component, args: [{
                    selector: 'bk-doughnut-chart',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: "\n    <div echarts [options]=\"options\" [autoResize]=\"true\" [style.height.%]=\"100\"></div>\n  ",
                    styles: [':host { display: block }']
                }] }
    ];
    /** @nocollapse */
    BkDoughnutChartComponent.ctorParameters = function () { return [
        { type: NbThemeService }
    ]; };
    BkDoughnutChartComponent.propDecorators = {
        data: [{ type: Input }]
    };
    return BkDoughnutChartComponent;
}());
export { BkDoughnutChartComponent };
if (false) {
    /** @type {?} */
    BkDoughnutChartComponent.prototype.options;
    /**
     * @type {?}
     * @private
     */
    BkDoughnutChartComponent.prototype._data;
    /**
     * @type {?}
     * @private
     */
    BkDoughnutChartComponent.prototype.colorConfig;
    /**
     * @type {?}
     * @private
     */
    BkDoughnutChartComponent.prototype.destroyed$;
    /**
     * @type {?}
     * @private
     */
    BkDoughnutChartComponent.prototype.theme;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG91Z2hudXQtY2hhcnQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHVpYmFrZXJ5L2tpdC8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL2RvdWdobnV0LWNoYXJ0L2RvdWdobnV0LWNoYXJ0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLHVCQUF1QixFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQXFCLE1BQU0sZUFBZSxDQUFDO0FBQzdGLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVoRCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQy9CLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUUzQztJQXVCRSxrQ0FBb0IsS0FBcUI7UUFBckIsVUFBSyxHQUFMLEtBQUssQ0FBZ0I7UUFOekMsWUFBTyxHQUFRLEVBQUUsQ0FBQztRQUVWLFVBQUssR0FBRyxFQUFFLENBQUM7UUFDWCxnQkFBVyxHQUFRLEVBQUUsQ0FBQztRQUN0QixlQUFVLEdBQWtCLElBQUksT0FBTyxFQUFFLENBQUM7SUFHbEQsQ0FBQztJQVpELHNCQUFhLDBDQUFJOzs7OztRQUFqQixVQUFrQixJQUFJO1lBQ3BCLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO1lBQ2xCLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUN2QixDQUFDOzs7T0FBQTs7OztJQVdELDJDQUFROzs7SUFBUjtRQUFBLGlCQU9DO1FBTkMsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQUU7YUFDcEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7YUFDaEMsU0FBUzs7OztRQUFDLFVBQUMsTUFBd0I7WUFDbEMsS0FBSSxDQUFDLFdBQVcsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQztZQUMzQyxLQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDdkIsQ0FBQyxFQUFDLENBQUM7SUFDUCxDQUFDOzs7O0lBRUQsOENBQVc7OztJQUFYO1FBQ0UsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUN6QixDQUFDOzs7OztJQUVPLGdEQUFhOzs7O0lBQXJCO1FBQ0UsSUFBSSxDQUFDLE9BQU8sR0FBRztZQUNiLGVBQWUsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUU7WUFDcEMsS0FBSyxFQUFFO2dCQUNMLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTztnQkFDeEIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJO2dCQUNyQixJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU07Z0JBQ3ZCLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTztnQkFDeEIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPO2FBQ3pCO1lBQ0QsT0FBTyxFQUFFO2dCQUNQLE9BQU8sRUFBRSxNQUFNO2dCQUNmLFNBQVMsRUFBRSwwQkFBMEI7YUFDdEM7WUFDRCxNQUFNLEVBQUU7Z0JBQ04sTUFBTSxFQUFFLFVBQVU7Z0JBQ2xCLENBQUMsRUFBRSxNQUFNO2dCQUNULElBQUksRUFBRSxDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxRQUFRLENBQUM7Z0JBQ3RELFNBQVMsRUFBRTtvQkFDVCxLQUFLLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTO2lCQUNsQzthQUNGO1lBQ0QsTUFBTSxFQUFFO2dCQUNOO29CQUNFLElBQUksRUFBRSxXQUFXO29CQUNqQixJQUFJLEVBQUUsS0FBSztvQkFDWCxNQUFNLEVBQUUsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDO29CQUN0QixpQkFBaUIsRUFBRSxLQUFLO29CQUN4QixLQUFLLEVBQUU7d0JBQ0wsTUFBTSxFQUFFOzRCQUNOLElBQUksRUFBRSxLQUFLOzRCQUNYLFFBQVEsRUFBRSxRQUFRO3lCQUNuQjt3QkFDRCxRQUFRLEVBQUU7NEJBQ1IsSUFBSSxFQUFFLElBQUk7NEJBQ1YsU0FBUyxFQUFFO2dDQUNULFFBQVEsRUFBRSxJQUFJO2dDQUNkLFVBQVUsRUFBRSxNQUFNOzZCQUNuQjt5QkFDRjtxQkFDRjtvQkFDRCxJQUFJLEVBQUUsSUFBSSxDQUFDLEtBQUs7aUJBQ2pCO2FBQ0Y7U0FDRixDQUFDO0lBQ0osQ0FBQzs7Z0JBcEZGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsbUJBQW1CO29CQUM3QixlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtvQkFJL0MsUUFBUSxFQUFFLG9HQUVUOzZCQUpDLDBCQUEwQjtpQkFLN0I7Ozs7Z0JBZFEsY0FBYzs7O3VCQWlCcEIsS0FBSzs7SUEwRVIsK0JBQUM7Q0FBQSxBQXRGRCxJQXNGQztTQTVFWSx3QkFBd0I7OztJQU9uQywyQ0FBa0I7Ozs7O0lBRWxCLHlDQUFtQjs7Ozs7SUFDbkIsK0NBQThCOzs7OztJQUM5Qiw4Q0FBa0Q7Ozs7O0lBRXRDLHlDQUE2QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnQsIElucHV0LCBPbkRlc3Ryb3ksIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTmJUaGVtZVNlcnZpY2UgfSBmcm9tICdAbmVidWxhci90aGVtZSc7XG5pbXBvcnQgeyBOYkpTVGhlbWVPcHRpb25zIH0gZnJvbSAnQG5lYnVsYXIvdGhlbWUvc2VydmljZXMvanMtdGhlbWVzL3RoZW1lLm9wdGlvbnMnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgdGFrZVVudGlsIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdiay1kb3VnaG51dC1jaGFydCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICBzdHlsZXM6IFtcbiAgICAnOmhvc3QgeyBkaXNwbGF5OiBibG9jayB9JyxcbiAgXSxcbiAgdGVtcGxhdGU6IGBcbiAgICA8ZGl2IGVjaGFydHMgW29wdGlvbnNdPVwib3B0aW9uc1wiIFthdXRvUmVzaXplXT1cInRydWVcIiBbc3R5bGUuaGVpZ2h0LiVdPVwiMTAwXCI+PC9kaXY+XG4gIGAsXG59KVxuZXhwb3J0IGNsYXNzIEJrRG91Z2hudXRDaGFydENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcblxuICBASW5wdXQoKSBzZXQgZGF0YShkYXRhKSB7XG4gICAgdGhpcy5fZGF0YSA9IGRhdGE7XG4gICAgdGhpcy51cGRhdGVPcHRpb25zKCk7XG4gIH1cblxuICBvcHRpb25zOiBhbnkgPSB7fTtcblxuICBwcml2YXRlIF9kYXRhID0gW107XG4gIHByaXZhdGUgY29sb3JDb25maWc6IGFueSA9IHt9O1xuICBwcml2YXRlIGRlc3Ryb3llZCQ6IFN1YmplY3Q8dm9pZD4gPSBuZXcgU3ViamVjdCgpO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgdGhlbWU6IE5iVGhlbWVTZXJ2aWNlKSB7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLnRoZW1lLmdldEpzVGhlbWUoKVxuICAgICAgLnBpcGUodGFrZVVudGlsKHRoaXMuZGVzdHJveWVkJCkpXG4gICAgICAuc3Vic2NyaWJlKChjb25maWc6IE5iSlNUaGVtZU9wdGlvbnMpID0+IHtcbiAgICAgICAgdGhpcy5jb2xvckNvbmZpZyA9IGNvbmZpZy52YXJpYWJsZXMuY2hhcnRzO1xuICAgICAgICB0aGlzLnVwZGF0ZU9wdGlvbnMoKTtcbiAgICAgIH0pO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5kZXN0cm95ZWQkLm5leHQoKTtcbiAgfVxuXG4gIHByaXZhdGUgdXBkYXRlT3B0aW9ucygpIHtcbiAgICB0aGlzLm9wdGlvbnMgPSB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoaXMuY29sb3JDb25maWcuYmcsXG4gICAgICBjb2xvcjogW1xuICAgICAgICB0aGlzLmNvbG9yQ29uZmlnLndhcm5pbmcsXG4gICAgICAgIHRoaXMuY29sb3JDb25maWcuaW5mbyxcbiAgICAgICAgdGhpcy5jb2xvckNvbmZpZy5kYW5nZXIsXG4gICAgICAgIHRoaXMuY29sb3JDb25maWcuc3VjY2VzcyxcbiAgICAgICAgdGhpcy5jb2xvckNvbmZpZy5wcmltYXJ5LFxuICAgICAgXSxcbiAgICAgIHRvb2x0aXA6IHtcbiAgICAgICAgdHJpZ2dlcjogJ2l0ZW0nLFxuICAgICAgICBmb3JtYXR0ZXI6ICd7YX0gPGJyLz57Yn06IHtjfSAoe2R9JSknLFxuICAgICAgfSxcbiAgICAgIGxlZ2VuZDoge1xuICAgICAgICBvcmllbnQ6ICd2ZXJ0aWNhbCcsXG4gICAgICAgIHg6ICdsZWZ0JyxcbiAgICAgICAgZGF0YTogWydVU0EnLCAnR2VybWFueScsICdGcmFuY2UnLCAnQ2FuYWRhJywgJ1J1c3NpYSddLFxuICAgICAgICB0ZXh0U3R5bGU6IHtcbiAgICAgICAgICBjb2xvcjogdGhpcy5jb2xvckNvbmZpZy50ZXh0Q29sb3IsXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAgc2VyaWVzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBuYW1lOiAnQ291bnRyaWVzJyxcbiAgICAgICAgICB0eXBlOiAncGllJyxcbiAgICAgICAgICByYWRpdXM6IFsnNTAlJywgJzcwJSddLFxuICAgICAgICAgIGF2b2lkTGFiZWxPdmVybGFwOiBmYWxzZSxcbiAgICAgICAgICBsYWJlbDoge1xuICAgICAgICAgICAgbm9ybWFsOiB7XG4gICAgICAgICAgICAgIHNob3c6IGZhbHNlLFxuICAgICAgICAgICAgICBwb3NpdGlvbjogJ2NlbnRlcicsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZW1waGFzaXM6IHtcbiAgICAgICAgICAgICAgc2hvdzogdHJ1ZSxcbiAgICAgICAgICAgICAgdGV4dFN0eWxlOiB7XG4gICAgICAgICAgICAgICAgZm9udFNpemU6ICcyNScsXG4gICAgICAgICAgICAgICAgZm9udFdlaWdodDogJ2JvbGQnLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICAgIGRhdGE6IHRoaXMuX2RhdGEsXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH07XG4gIH1cblxufVxuIl19