/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectorRef, Directive, ElementRef, NgZone } from '@angular/core';
import { Éµa as NgxEchartsDirective } from 'ngx-echarts';
// tslint:disable-next-line:directive-selector
var EchartsDirective = /** @class */ (function (_super) {
    tslib_1.__extends(EchartsDirective, _super);
    function EchartsDirective(element, cd, ngZone) {
        var _this = _super.call(this, element, ngZone) || this;
        _this.element = element;
        _this.cd = cd;
        _this.alive = true;
        return _this;
    }
    /**
     * @return {?}
     */
    EchartsDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.alive = false;
    };
    /**
     * @return {?}
     */
    EchartsDirective.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngDoCheck.call(this);
        this.invalidate();
    };
    /**
     * Echarts work in a strange way, they're detecting if component visible or not
     * and only then trying to decide render chart or not.
     * In a number of cases like Nebular Tabset we have element already rendered but hidden for now.
     * And when we're trying to make it visible echarts doesn't react and stays not rendered.
     *
     * Invoking intersection observer on each doCheck provides us the ability to track
     * whether we need to update charts component or not.
     * */
    /**
     * Echarts work in a strange way, they're detecting if component visible or not
     * and only then trying to decide render chart or not.
     * In a number of cases like Nebular Tabset we have element already rendered but hidden for now.
     * And when we're trying to make it visible echarts doesn't react and stays not rendered.
     *
     * Invoking intersection observer on each doCheck provides us the ability to track
     * whether we need to update charts component or not.
     *
     * @private
     * @return {?}
     */
    EchartsDirective.prototype.invalidate = /**
     * Echarts work in a strange way, they're detecting if component visible or not
     * and only then trying to decide render chart or not.
     * In a number of cases like Nebular Tabset we have element already rendered but hidden for now.
     * And when we're trying to make it visible echarts doesn't react and stays not rendered.
     *
     * Invoking intersection observer on each doCheck provides us the ability to track
     * whether we need to update charts component or not.
     *
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var o = new IntersectionObserver((/**
         * @param {?} entries
         * @return {?}
         */
        function (entries) {
            var _a = tslib_1.__read(entries, 1), entry = _a[0];
            // Means component is visible
            if (entry.isIntersecting) {
                if (_this.alive) {
                    _this.cd.detectChanges();
                }
                o.disconnect();
            }
        }));
        o.observe(this.element.nativeElement);
    };
    EchartsDirective.decorators = [
        { type: Directive, args: [{ selector: '[echarts]' },] }
    ];
    /** @nocollapse */
    EchartsDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ChangeDetectorRef },
        { type: NgZone }
    ]; };
    return EchartsDirective;
}(NgxEchartsDirective));
export { EchartsDirective };
if (false) {
    /**
     * @type {?}
     * @private
     */
    EchartsDirective.prototype.alive;
    /**
     * @type {?}
     * @private
     */
    EchartsDirective.prototype.element;
    /**
     * @type {?}
     * @private
     */
    EchartsDirective.prototype.cd;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWNoYXJ0cy5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdWliYWtlcnkva2l0LyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvZWNoYXJ0cy9lY2hhcnRzLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxTQUFTLEVBQVcsVUFBVSxFQUFFLE1BQU0sRUFBYSxNQUFNLGVBQWUsQ0FBQztBQUNyRyxPQUFPLEVBQUUsRUFBRSxJQUFJLG1CQUFtQixFQUFFLE1BQU0sYUFBYSxDQUFDOztBQUd4RDtJQUNzQyw0Q0FBbUI7SUFJdkQsMEJBQW9CLE9BQW1CLEVBQVUsRUFBcUIsRUFBRSxNQUFjO1FBQXRGLFlBQ0Usa0JBQU0sT0FBTyxFQUFFLE1BQU0sQ0FBQyxTQUN2QjtRQUZtQixhQUFPLEdBQVAsT0FBTyxDQUFZO1FBQVUsUUFBRSxHQUFGLEVBQUUsQ0FBbUI7UUFGOUQsV0FBSyxHQUFHLElBQUksQ0FBQzs7SUFJckIsQ0FBQzs7OztJQUVELHNDQUFXOzs7SUFBWDtRQUNFLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0lBQ3JCLENBQUM7Ozs7SUFFRCxvQ0FBUzs7O0lBQVQ7UUFDRSxpQkFBTSxTQUFTLFdBQUUsQ0FBQztRQUNsQixJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDcEIsQ0FBQztJQUVEOzs7Ozs7OztTQVFLOzs7Ozs7Ozs7Ozs7O0lBQ0cscUNBQVU7Ozs7Ozs7Ozs7OztJQUFsQjtRQUFBLGlCQWNDOztZQWJPLENBQUMsR0FBRyxJQUFJLG9CQUFvQjs7OztRQUFDLFVBQUMsT0FBb0M7WUFDaEUsSUFBQSwrQkFBaUIsRUFBaEIsYUFBZ0I7WUFFdkIsNkJBQTZCO1lBQzdCLElBQUksS0FBSyxDQUFDLGNBQWMsRUFBRTtnQkFDeEIsSUFBSSxLQUFJLENBQUMsS0FBSyxFQUFFO29CQUNkLEtBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLENBQUM7aUJBQ3pCO2dCQUNELENBQUMsQ0FBQyxVQUFVLEVBQUUsQ0FBQzthQUNoQjtRQUNILENBQUMsRUFBQztRQUVGLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUN4QyxDQUFDOztnQkF6Q0YsU0FBUyxTQUFDLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRTs7OztnQkFKWSxVQUFVO2dCQUFqRCxpQkFBaUI7Z0JBQWtDLE1BQU07O0lBOENsRSx1QkFBQztDQUFBLEFBMUNELENBQ3NDLG1CQUFtQixHQXlDeEQ7U0F6Q1ksZ0JBQWdCOzs7Ozs7SUFFM0IsaUNBQXFCOzs7OztJQUVULG1DQUEyQjs7Ozs7SUFBRSw4QkFBNkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3RvclJlZiwgRGlyZWN0aXZlLCBEb0NoZWNrLCBFbGVtZW50UmVmLCBOZ1pvbmUsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgybVhIGFzIE5neEVjaGFydHNEaXJlY3RpdmUgfSBmcm9tICduZ3gtZWNoYXJ0cyc7XG5cbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpkaXJlY3RpdmUtc2VsZWN0b3JcbkBEaXJlY3RpdmUoeyBzZWxlY3RvcjogJ1tlY2hhcnRzXScgfSlcbmV4cG9ydCBjbGFzcyBFY2hhcnRzRGlyZWN0aXZlIGV4dGVuZHMgTmd4RWNoYXJ0c0RpcmVjdGl2ZSBpbXBsZW1lbnRzIERvQ2hlY2ssIE9uRGVzdHJveSB7XG5cbiAgcHJpdmF0ZSBhbGl2ZSA9IHRydWU7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbGVtZW50OiBFbGVtZW50UmVmLCBwcml2YXRlIGNkOiBDaGFuZ2VEZXRlY3RvclJlZiwgbmdab25lOiBOZ1pvbmUpIHtcbiAgICBzdXBlcihlbGVtZW50LCBuZ1pvbmUpO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5hbGl2ZSA9IGZhbHNlO1xuICB9XG5cbiAgbmdEb0NoZWNrKCk6IHZvaWQge1xuICAgIHN1cGVyLm5nRG9DaGVjaygpO1xuICAgIHRoaXMuaW52YWxpZGF0ZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEVjaGFydHMgd29yayBpbiBhIHN0cmFuZ2Ugd2F5LCB0aGV5J3JlIGRldGVjdGluZyBpZiBjb21wb25lbnQgdmlzaWJsZSBvciBub3RcbiAgICogYW5kIG9ubHkgdGhlbiB0cnlpbmcgdG8gZGVjaWRlIHJlbmRlciBjaGFydCBvciBub3QuXG4gICAqIEluIGEgbnVtYmVyIG9mIGNhc2VzIGxpa2UgTmVidWxhciBUYWJzZXQgd2UgaGF2ZSBlbGVtZW50IGFscmVhZHkgcmVuZGVyZWQgYnV0IGhpZGRlbiBmb3Igbm93LlxuICAgKiBBbmQgd2hlbiB3ZSdyZSB0cnlpbmcgdG8gbWFrZSBpdCB2aXNpYmxlIGVjaGFydHMgZG9lc24ndCByZWFjdCBhbmQgc3RheXMgbm90IHJlbmRlcmVkLlxuICAgKlxuICAgKiBJbnZva2luZyBpbnRlcnNlY3Rpb24gb2JzZXJ2ZXIgb24gZWFjaCBkb0NoZWNrIHByb3ZpZGVzIHVzIHRoZSBhYmlsaXR5IHRvIHRyYWNrXG4gICAqIHdoZXRoZXIgd2UgbmVlZCB0byB1cGRhdGUgY2hhcnRzIGNvbXBvbmVudCBvciBub3QuXG4gICAqICovXG4gIHByaXZhdGUgaW52YWxpZGF0ZSgpIHtcbiAgICBjb25zdCBvID0gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyKChlbnRyaWVzOiBJbnRlcnNlY3Rpb25PYnNlcnZlckVudHJ5W10pID0+IHtcbiAgICAgIGNvbnN0IFtlbnRyeV0gPSBlbnRyaWVzO1xuXG4gICAgICAvLyBNZWFucyBjb21wb25lbnQgaXMgdmlzaWJsZVxuICAgICAgaWYgKGVudHJ5LmlzSW50ZXJzZWN0aW5nKSB7XG4gICAgICAgIGlmICh0aGlzLmFsaXZlKSB7XG4gICAgICAgICAgdGhpcy5jZC5kZXRlY3RDaGFuZ2VzKCk7XG4gICAgICAgIH1cbiAgICAgICAgby5kaXNjb25uZWN0KCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBvLm9ic2VydmUodGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQpO1xuICB9XG59XG5cbiJdfQ==