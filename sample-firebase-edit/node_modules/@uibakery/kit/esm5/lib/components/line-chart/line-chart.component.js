/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
import { NbThemeService } from '@nebular/theme';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
var BkLineChartComponent = /** @class */ (function () {
    function BkLineChartComponent(theme) {
        this.theme = theme;
        this.options = {};
        this._data = { income: [], outcome: [], profit: [] };
        this.colorConfig = {};
        this.destroyed$ = new Subject();
    }
    Object.defineProperty(BkLineChartComponent.prototype, "data", {
        set: /**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            this._data = data;
            this.updateOptions();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    BkLineChartComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.theme.getJsTheme()
            .pipe(takeUntil(this.destroyed$))
            .subscribe((/**
         * @param {?} config
         * @return {?}
         */
        function (config) {
            _this.colorConfig = config.variables.charts;
            _this.updateOptions();
        }));
    };
    /**
     * @return {?}
     */
    BkLineChartComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.destroyed$.next();
    };
    /**
     * @private
     * @return {?}
     */
    BkLineChartComponent.prototype.updateOptions = /**
     * @private
     * @return {?}
     */
    function () {
        this.options = {
            backgroundColor: this.colorConfig.bg,
            color: [this.colorConfig.danger, this.colorConfig.primary, this.colorConfig.info],
            tooltip: {
                trigger: 'item',
                formatter: '{a} <br/>{b} : {c}',
            },
            xAxis: [
                {
                    type: 'category',
                    data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],
                    axisTick: {
                        alignWithLabel: true,
                    },
                    axisLine: {
                        lineStyle: {
                            color: this.colorConfig.axisLineColor,
                        },
                    },
                    axisLabel: {
                        textStyle: {
                            color: this.colorConfig.textColor,
                        },
                    },
                },
            ],
            yAxis: [
                {
                    axisLine: {
                        lineStyle: {
                            color: this.colorConfig.axisLineColor,
                        },
                    },
                    splitLine: {
                        lineStyle: {
                            color: this.colorConfig.splitLineColor,
                        },
                    },
                    axisLabel: {
                        textStyle: {
                            color: this.colorConfig.textColor,
                        },
                    },
                },
            ],
            grid: {
                left: '3%',
                right: '4%',
                bottom: '3%',
                containLabel: true,
            },
            series: [
                {
                    name: 'Income',
                    type: 'line',
                    data: this._data.income,
                },
                {
                    name: 'Outcome',
                    type: 'line',
                    data: this._data.outcome,
                },
                {
                    name: 'Profit',
                    type: 'line',
                    data: this._data.profit,
                },
            ],
        };
    };
    BkLineChartComponent.decorators = [
        { type: Component, args: [{
                    selector: 'bk-line-chart',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: "\n    <div echarts [options]=\"options\" [autoResize]=\"true\" [style.height.%]=\"100\"></div>\n  ",
                    styles: [':host { display: block }']
                }] }
    ];
    /** @nocollapse */
    BkLineChartComponent.ctorParameters = function () { return [
        { type: NbThemeService }
    ]; };
    BkLineChartComponent.propDecorators = {
        data: [{ type: Input }]
    };
    return BkLineChartComponent;
}());
export { BkLineChartComponent };
if (false) {
    /** @type {?} */
    BkLineChartComponent.prototype.options;
    /**
     * @type {?}
     * @private
     */
    BkLineChartComponent.prototype._data;
    /**
     * @type {?}
     * @private
     */
    BkLineChartComponent.prototype.colorConfig;
    /**
     * @type {?}
     * @private
     */
    BkLineChartComponent.prototype.destroyed$;
    /**
     * @type {?}
     * @private
     */
    BkLineChartComponent.prototype.theme;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGluZS1jaGFydC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdWliYWtlcnkva2l0LyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvbGluZS1jaGFydC9saW5lLWNoYXJ0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLHVCQUF1QixFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQXFCLE1BQU0sZUFBZSxDQUFDO0FBQzdGLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVoRCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQy9CLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUUzQztJQXVCRSw4QkFBb0IsS0FBcUI7UUFBckIsVUFBSyxHQUFMLEtBQUssQ0FBZ0I7UUFOekMsWUFBTyxHQUFRLEVBQUUsQ0FBQztRQUVWLFVBQUssR0FBNEMsRUFBRSxNQUFNLEVBQUUsRUFBRSxFQUFFLE9BQU8sRUFBRSxFQUFFLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRSxDQUFDO1FBQ3pGLGdCQUFXLEdBQVEsRUFBRSxDQUFDO1FBQ3RCLGVBQVUsR0FBa0IsSUFBSSxPQUFPLEVBQUUsQ0FBQztJQUdsRCxDQUFDO0lBWkQsc0JBQWEsc0NBQUk7Ozs7O1FBQWpCLFVBQWtCLElBQTZDO1lBQzdELElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO1lBQ2xCLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUN2QixDQUFDOzs7T0FBQTs7OztJQVdELHVDQUFROzs7SUFBUjtRQUFBLGlCQU9DO1FBTkMsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQUU7YUFDcEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7YUFDaEMsU0FBUzs7OztRQUFDLFVBQUMsTUFBd0I7WUFDbEMsS0FBSSxDQUFDLFdBQVcsR0FBRyxN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dCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBJbnB1dCwgT25EZXN0cm95LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5iVGhlbWVTZXJ2aWNlIH0gZnJvbSAnQG5lYnVsYXIvdGhlbWUnO1xuaW1wb3J0IHsgTmJKU1RoZW1lT3B0aW9ucyB9IGZyb20gJ0BuZWJ1bGFyL3RoZW1lL3NlcnZpY2VzL2pzLXRoZW1lcy90aGVtZS5vcHRpb25zJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IHRha2VVbnRpbCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYmstbGluZS1jaGFydCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICBzdHlsZXM6IFtcbiAgICAnOmhvc3QgeyBkaXNwbGF5OiBibG9jayB9JyxcbiAgXSxcbiAgdGVtcGxhdGU6IGBcbiAgICA8ZGl2IGVjaGFydHMgW29wdGlvbnNdPVwib3B0aW9uc1wiIFthdXRvUmVzaXplXT1cInRydWVcIiBbc3R5bGUuaGVpZ2h0LiVdPVwiMTAwXCI+PC9kaXY+XG4gIGAsXG59KVxuZXhwb3J0IGNsYXNzIEJrTGluZUNoYXJ0Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuXG4gIEBJbnB1dCgpIHNldCBkYXRhKGRhdGE6IHsgaW5jb21lOiBbXSwgb3V0Y29tZTogW10sIHByb2ZpdDogW10gfSkge1xuICAgIHRoaXMuX2RhdGEgPSBkYXRhO1xuICAgIHRoaXMudXBkYXRlT3B0aW9ucygpO1xuICB9XG5cbiAgb3B0aW9uczogYW55ID0ge307XG5cbiAgcHJpdmF0ZSBfZGF0YTogeyBpbmNvbWU6IFtdLCBvdXRjb21lOiBbXSwgcHJvZml0OiBbXSB9ID0geyBpbmNvbWU6IFtdLCBvdXRjb21lOiBbXSwgcHJvZml0OiBbXSB9O1xuICBwcml2YXRlIGNvbG9yQ29uZmlnOiBhbnkgPSB7fTtcbiAgcHJpdmF0ZSBkZXN0cm95ZWQkOiBTdWJqZWN0PHZvaWQ+ID0gbmV3IFN1YmplY3QoKTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHRoZW1lOiBOYlRoZW1lU2VydmljZSkge1xuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy50aGVtZS5nZXRKc1RoZW1lKClcbiAgICAgIC5waXBlKHRha2VVbnRpbCh0aGlzLmRlc3Ryb3llZCQpKVxuICAgICAgLnN1YnNjcmliZSgoY29uZmlnOiBOYkpTVGhlbWVPcHRpb25zKSA9PiB7XG4gICAgICAgIHRoaXMuY29sb3JDb25maWcgPSBjb25maWcudmFyaWFibGVzLmNoYXJ0cztcbiAgICAgICAgdGhpcy51cGRhdGVPcHRpb25zKCk7XG4gICAgICB9KTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuZGVzdHJveWVkJC5uZXh0KCk7XG4gIH1cblxuICBwcml2YXRlIHVwZGF0ZU9wdGlvbnMoKSB7XG4gICAgdGhpcy5vcHRpb25zID0ge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGlzLmNvbG9yQ29uZmlnLmJnLFxuICAgICAgY29sb3I6IFt0aGlzLmNvbG9yQ29uZmlnLmRhbmdlciwgdGhpcy5jb2xvckNvbmZpZy5wcmltYXJ5LCB0aGlzLmNvbG9yQ29uZmlnLmluZm9dLFxuICAgICAgdG9vbHRpcDoge1xuICAgICAgICB0cmlnZ2VyOiAnaXRlbScsXG4gICAgICAgIGZvcm1hdHRlcjogJ3thfSA8YnIvPntifSA6IHtjfScsXG4gICAgICB9LFxuICAgICAgeEF4aXM6IFtcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6ICdjYXRlZ29yeScsXG4gICAgICAgICAgZGF0YTogWydNb24nLCAnVHVlJywgJ1dlZCcsICdUaHUnLCAnRnJpJywgJ1NhdCcsICdTdW4nXSxcbiAgICAgICAgICBheGlzVGljazoge1xuICAgICAgICAgICAgYWxpZ25XaXRoTGFiZWw6IHRydWUsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBheGlzTGluZToge1xuICAgICAgICAgICAgbGluZVN0eWxlOiB7XG4gICAgICAgICAgICAgIGNvbG9yOiB0aGlzLmNvbG9yQ29uZmlnLmF4aXNMaW5lQ29sb3IsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgICAgYXhpc0xhYmVsOiB7XG4gICAgICAgICAgICB0ZXh0U3R5bGU6IHtcbiAgICAgICAgICAgICAgY29sb3I6IHRoaXMuY29sb3JDb25maWcudGV4dENvbG9yLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICAgIHlBeGlzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBheGlzTGluZToge1xuICAgICAgICAgICAgbGluZVN0eWxlOiB7XG4gICAgICAgICAgICAgIGNvbG9yOiB0aGlzLmNvbG9yQ29uZmlnLmF4aXNMaW5lQ29sb3IsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgICAgc3BsaXRMaW5lOiB7XG4gICAgICAgICAgICBsaW5lU3R5bGU6IHtcbiAgICAgICAgICAgICAgY29sb3I6IHRoaXMuY29sb3JDb25maWcuc3BsaXRMaW5lQ29sb3IsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgICAgYXhpc0xhYmVsOiB7XG4gICAgICAgICAgICB0ZXh0U3R5bGU6IHtcbiAgICAgICAgICAgICAgY29sb3I6IHRoaXMuY29sb3JDb25maWcudGV4dENvbG9yLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICAgIGdyaWQ6IHtcbiAgICAgICAgbGVmdDogJzMlJyxcbiAgICAgICAgcmlnaHQ6ICc0JScsXG4gICAgICAgIGJvdHRvbTogJzMlJyxcbiAgICAgICAgY29udGFpbkxhYmVsOiB0cnVlLFxuICAgICAgfSxcbiAgICAgIHNlcmllczogW1xuICAgICAgICB7XG4gICAgICAgICAgbmFtZTogJ0luY29tZScsXG4gICAgICAgICAgdHlwZTogJ2xpbmUnLFxuICAgICAgICAgIGRhdGE6IHRoaXMuX2RhdGEuaW5jb21lLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgbmFtZTogJ091dGNvbWUnLFxuICAgICAgICAgIHR5cGU6ICdsaW5lJyxcbiAgICAgICAgICBkYXRhOiB0aGlzLl9kYXRhLm91dGNvbWUsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBuYW1lOiAnUHJvZml0JyxcbiAgICAgICAgICB0eXBlOiAnbGluZScsXG4gICAgICAgICAgZGF0YTogdGhpcy5fZGF0YS5wcm9maXQsXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH07XG4gIH1cblxufVxuIl19