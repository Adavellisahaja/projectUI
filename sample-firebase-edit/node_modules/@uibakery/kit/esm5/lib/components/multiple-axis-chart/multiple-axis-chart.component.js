/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
import { NbThemeService } from '@nebular/theme';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
var BkMultipleAxisChartComponent = /** @class */ (function () {
    function BkMultipleAxisChartComponent(theme) {
        this.theme = theme;
        this.options = {};
        this._data = { firstDataset: [], secondDataset: [] };
        this.colorConfig = {};
        this.destroyed$ = new Subject();
    }
    Object.defineProperty(BkMultipleAxisChartComponent.prototype, "data", {
        set: /**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            this._data = data;
            this.updateOptions();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    BkMultipleAxisChartComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.theme.getJsTheme()
            .pipe(takeUntil(this.destroyed$))
            .subscribe((/**
         * @param {?} config
         * @return {?}
         */
        function (config) {
            _this.colorConfig = config.variables.charts;
            _this.updateOptions();
        }));
    };
    /**
     * @return {?}
     */
    BkMultipleAxisChartComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.destroyed$.next();
    };
    /**
     * @private
     * @return {?}
     */
    BkMultipleAxisChartComponent.prototype.updateOptions = /**
     * @private
     * @return {?}
     */
    function () {
        this.options = {
            backgroundColor: this.colorConfig.bg,
            color: [
                this.colorConfig.primary,
                this.colorConfig.info,
            ],
            tooltip: {
                trigger: 'axis',
                axisPointer: {
                    type: 'cross',
                },
            },
            legend: {
                data: ['First Dataset', 'Second Dataset'],
                textStyle: {
                    color: this.colorConfig.textColor,
                },
            },
            xAxis: [
                {
                    type: 'category',
                    axisTick: {
                        alignWithLabel: true,
                    },
                    data: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],
                    axisLine: {
                        lineStyle: {
                            color: this.colorConfig.axisLineColor,
                        },
                    },
                    splitLine: {
                        lineStyle: {
                            color: this.colorConfig.splitLineColor,
                        },
                    },
                    axisLabel: {
                        textStyle: {
                            color: this.colorConfig.textColor,
                        },
                    },
                },
            ],
            yAxis: [
                {
                    type: 'value',
                    name: 'First Dataset',
                    min: -90,
                    max: 60,
                    position: 'left',
                    axisLine: {
                        lineStyle: {
                            color: this.colorConfig.primary,
                        },
                    },
                    axisLabel: {
                        formatter: '{value} °C',
                    },
                },
                {
                    type: 'value',
                    name: 'Second Dataset',
                    min: -90,
                    max: 80,
                    position: 'right',
                    axisLine: {
                        lineStyle: {
                            color: this.colorConfig.danger,
                        },
                    },
                    axisLabel: {
                        formatter: '{value} °C',
                    },
                    splitLine: {
                        show: false,
                    },
                },
            ],
            series: [
                {
                    name: 'First Dataset',
                    type: 'line',
                    yAxisIndex: 0,
                    smooth: true,
                    itemStyle: { color: this.colorConfig.primary },
                    data: this._data.firstDataset,
                },
                {
                    name: 'Second Dataset',
                    type: 'line',
                    yAxisIndex: 1,
                    smooth: true,
                    itemStyle: { color: this.colorConfig.danger },
                    data: this._data.secondDataset,
                },
            ],
        };
    };
    BkMultipleAxisChartComponent.decorators = [
        { type: Component, args: [{
                    selector: 'bk-multiple-axis-chart',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: "\n    <div echarts [options]=\"options\" [autoResize]=\"true\" [style.height.%]=\"100\"></div>\n  ",
                    styles: [':host { display: block }']
                }] }
    ];
    /** @nocollapse */
    BkMultipleAxisChartComponent.ctorParameters = function () { return [
        { type: NbThemeService }
    ]; };
    BkMultipleAxisChartComponent.propDecorators = {
        data: [{ type: Input }]
    };
    return BkMultipleAxisChartComponent;
}());
export { BkMultipleAxisChartComponent };
if (false) {
    /** @type {?} */
    BkMultipleAxisChartComponent.prototype.options;
    /**
     * @type {?}
     * @private
     */
    BkMultipleAxisChartComponent.prototype._data;
    /**
     * @type {?}
     * @private
     */
    BkMultipleAxisChartComponent.prototype.colorConfig;
    /**
     * @type {?}
     * @private
     */
    BkMultipleAxisChartComponent.prototype.destroyed$;
    /**
     * @type {?}
     * @private
     */
    BkMultipleAxisChartComponent.prototype.theme;
}
//# sourceMappingURL=data:application/json;base64,