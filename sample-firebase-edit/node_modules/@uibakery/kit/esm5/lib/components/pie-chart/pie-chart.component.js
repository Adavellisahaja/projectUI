/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
import { NbThemeService } from '@nebular/theme';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
var BkPieChartComponent = /** @class */ (function () {
    function BkPieChartComponent(theme) {
        this.theme = theme;
        this.options = {};
        this._data = [];
        this.colorConfig = {};
        this.destroyed$ = new Subject();
    }
    Object.defineProperty(BkPieChartComponent.prototype, "data", {
        set: /**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            this._data = data;
            this.updateOptions();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    BkPieChartComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.theme.getJsTheme()
            .pipe(takeUntil(this.destroyed$))
            .subscribe((/**
         * @param {?} config
         * @return {?}
         */
        function (config) {
            _this.colorConfig = config.variables.charts;
            _this.updateOptions();
        }));
    };
    /**
     * @return {?}
     */
    BkPieChartComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.destroyed$.next();
    };
    /**
     * @private
     * @return {?}
     */
    BkPieChartComponent.prototype.updateOptions = /**
     * @private
     * @return {?}
     */
    function () {
        this.options = {
            backgroundColor: this.colorConfig.bg,
            color: [
                this.colorConfig.warning,
                this.colorConfig.info,
                this.colorConfig.danger,
                this.colorConfig.success,
                this.colorConfig.primary,
            ],
            tooltip: {
                trigger: 'item',
                formatter: '{a} <br/>{b} : {c} ({d}%)',
            },
            legend: {
                orient: 'vertical',
                left: 'left',
                data: ['USA', 'Germany', 'France', 'Canada', 'Russia'],
                textStyle: {
                    color: this.colorConfig.textColor,
                },
            },
            series: [
                {
                    name: 'Countries',
                    type: 'pie',
                    radius: '80%',
                    center: ['50%', '50%'],
                    data: this._data,
                    itemStyle: {
                        emphasis: {
                            shadowBlur: 10,
                            shadowOffsetX: 0,
                            shadowColor: this.colorConfig.itemHoverShadowColor,
                        },
                    },
                    label: {
                        normal: {
                            textStyle: {
                                color: this.colorConfig.textColor,
                            },
                        },
                    },
                    labelLine: {
                        normal: {
                            lineStyle: {
                                color: this.colorConfig.axisLineColor,
                            },
                        },
                    },
                },
            ],
        };
    };
    BkPieChartComponent.decorators = [
        { type: Component, args: [{
                    selector: 'bk-pie-chart',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: "\n    <div echarts [options]=\"options\" [autoResize]=\"true\" [style.height.%]=\"100\"></div>\n  ",
                    styles: [':host { display: block }']
                }] }
    ];
    /** @nocollapse */
    BkPieChartComponent.ctorParameters = function () { return [
        { type: NbThemeService }
    ]; };
    BkPieChartComponent.propDecorators = {
        data: [{ type: Input }]
    };
    return BkPieChartComponent;
}());
export { BkPieChartComponent };
if (false) {
    /** @type {?} */
    BkPieChartComponent.prototype.options;
    /**
     * @type {?}
     * @private
     */
    BkPieChartComponent.prototype._data;
    /**
     * @type {?}
     * @private
     */
    BkPieChartComponent.prototype.colorConfig;
    /**
     * @type {?}
     * @private
     */
    BkPieChartComponent.prototype.destroyed$;
    /**
     * @type {?}
     * @private
     */
    BkPieChartComponent.prototype.theme;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGllLWNoYXJ0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B1aWJha2VyeS9raXQvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9waWUtY2hhcnQvcGllLWNoYXJ0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLHVCQUF1QixFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQXFCLE1BQU0sZUFBZSxDQUFDO0FBQzdGLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVoRCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQy9CLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUUzQztJQXVCRSw2QkFBb0IsS0FBcUI7UUFBckIsVUFBSyxHQUFMLEtBQUssQ0FBZ0I7UUFOekMsWUFBTyxHQUFRLEVBQUUsQ0FBQztRQUVWLFVBQUssR0FBRyxFQUFFLENBQUM7UUFDWCxnQkFBVyxHQUFRLEVBQUUsQ0FBQztRQUN0QixlQUFVLEdBQWtCLElBQUksT0FBTyxFQUFFLENBQUM7SUFHbEQsQ0FBQztJQVpELHNCQUFhLHFDQUFJOzs7OztRQUFqQixVQUFrQixJQUFJO1lBQ3BCLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO1lBQ2xCLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUN2QixDQUFDOzs7T0FBQTs7OztJQVdELHNDQUFROzs7SUFBUjtRQUFBLGlCQU9DO1FBTkMsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQUU7YUFDcEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7YUFDaEMsU0FBUzs7OztRQUFDLFVBQUMsTUFBd0I7WUFDbEMsS0FBSSxDQUFDLFdBQVcsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQztZQUMzQyxLQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDdkIsQ0FBQyxFQUFDLENBQUM7SUFDUCxDQUFDOzs7O0lBRUQseUNBQVc7OztJQUFYO1FBQ0UsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUN6QixDQUFDOzs7OztJQUVPLDJDQUFhOzs7O0lBQXJCO1FBQ0UsSUFBSSxDQUFDLE9BQU8sR0FBRztZQUNiLGVBQWUsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUU7WUFDcEMsS0FBSyxFQUFFO2dCQUNMLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTztnQkFDeEIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJO2dCQUNyQixJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU07Z0JBQ3ZCLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTztnQkFDeEIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPO2FBQ3pCO1lBQ0QsT0FBTyxFQUFFO2dCQUNQLE9BQU8sRUFBRSxNQUFNO2dCQUNmLFNBQVMsRUFBRSwyQkFBMkI7YUFDdkM7WUFDRCxNQUFNLEVBQUU7Z0JBQ04sTUFBTSxFQUFFLFVBQVU7Z0JBQ2xCLElBQUksRUFBRSxNQUFNO2dCQUNaLElBQUksRUFBRSxDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxRQUFRLENBQUM7Z0JBQ3RELFNBQVMsRUFBRTtvQkFDVCxLQUFLLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTO2lCQUNsQzthQUNGO1lBQ0QsTUFBTSxFQUFFO2dCQUNOO29CQUNFLElBQUksRUFBRSxXQUFXO29CQUNqQixJQUFJLEVBQUUsS0FBSztvQkFDWCxNQUFNLEVBQUUsS0FBSztvQkFDYixNQUFNLEVBQUUsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDO29CQUN0QixJQUFJLEVBQUUsSUFBSSxDQUFDLEtBQUs7b0JBQ2hCLFNBQVMsRUFBRTt3QkFDVCxRQUFRLEVBQUU7NEJBQ1IsVUFBVSxFQUFFLEVBQUU7NEJBQ2QsYUFBYSxFQUFFLENBQUM7NEJBQ2hCLFdBQVcsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLG9CQUFvQjt5QkFDbkQ7cUJBQ0Y7b0JBQ0QsS0FBSyxFQUFFO3dCQUNMLE1BQU0sRUFBRTs0QkFDTixTQUFTLEVBQUU7Z0NBQ1QsS0FBSyxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUzs2QkFDbEM7eUJBQ0Y7cUJBQ0Y7b0JBQ0QsU0FBUyxFQUFFO3dCQUNULE1BQU0sRUFBRTs0QkFDTixTQUFTLEVBQUU7Z0NBQ1QsS0FBSyxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYTs2QkFDdEM7eUJBQ0Y7cUJBQ0Y7aUJBQ0Y7YUFDRjtTQUNGLENBQUM7SUFDSixDQUFDOztnQkE1RkYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxjQUFjO29CQUN4QixlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtvQkFJL0MsUUFBUSxFQUFFLG9HQUVUOzZCQUpDLDBCQUEwQjtpQkFLN0I7Ozs7Z0JBZFEsY0FBYzs7O3VCQWlCcEIsS0FBSzs7SUFrRlIsMEJBQUM7Q0FBQSxBQTlGRCxJQThGQztTQXBGWSxtQkFBbUI7OztJQU85QixzQ0FBa0I7Ozs7O0lBRWxCLG9DQUFtQjs7Ozs7SUFDbkIsMENBQThCOzs7OztJQUM5Qix5Q0FBa0Q7Ozs7O0lBRXRDLG9DQUE2QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnQsIElucHV0LCBPbkRlc3Ryb3ksIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTmJUaGVtZVNlcnZpY2UgfSBmcm9tICdAbmVidWxhci90aGVtZSc7XG5pbXBvcnQgeyBOYkpTVGhlbWVPcHRpb25zIH0gZnJvbSAnQG5lYnVsYXIvdGhlbWUvc2VydmljZXMvanMtdGhlbWVzL3RoZW1lLm9wdGlvbnMnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgdGFrZVVudGlsIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdiay1waWUtY2hhcnQnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgc3R5bGVzOiBbXG4gICAgJzpob3N0IHsgZGlzcGxheTogYmxvY2sgfScsXG4gIF0sXG4gIHRlbXBsYXRlOiBgXG4gICAgPGRpdiBlY2hhcnRzIFtvcHRpb25zXT1cIm9wdGlvbnNcIiBbYXV0b1Jlc2l6ZV09XCJ0cnVlXCIgW3N0eWxlLmhlaWdodC4lXT1cIjEwMFwiPjwvZGl2PlxuICBgLFxufSlcbmV4cG9ydCBjbGFzcyBCa1BpZUNoYXJ0Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuXG4gIEBJbnB1dCgpIHNldCBkYXRhKGRhdGEpIHtcbiAgICB0aGlzLl9kYXRhID0gZGF0YTtcbiAgICB0aGlzLnVwZGF0ZU9wdGlvbnMoKTtcbiAgfVxuXG4gIG9wdGlvbnM6IGFueSA9IHt9O1xuXG4gIHByaXZhdGUgX2RhdGEgPSBbXTtcbiAgcHJpdmF0ZSBjb2xvckNvbmZpZzogYW55ID0ge307XG4gIHByaXZhdGUgZGVzdHJveWVkJDogU3ViamVjdDx2b2lkPiA9IG5ldyBTdWJqZWN0KCk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSB0aGVtZTogTmJUaGVtZVNlcnZpY2UpIHtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMudGhlbWUuZ2V0SnNUaGVtZSgpXG4gICAgICAucGlwZSh0YWtlVW50aWwodGhpcy5kZXN0cm95ZWQkKSlcbiAgICAgIC5zdWJzY3JpYmUoKGNvbmZpZzogTmJKU1RoZW1lT3B0aW9ucykgPT4ge1xuICAgICAgICB0aGlzLmNvbG9yQ29uZmlnID0gY29uZmlnLnZhcmlhYmxlcy5jaGFydHM7XG4gICAgICAgIHRoaXMudXBkYXRlT3B0aW9ucygpO1xuICAgICAgfSk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLmRlc3Ryb3llZCQubmV4dCgpO1xuICB9XG5cbiAgcHJpdmF0ZSB1cGRhdGVPcHRpb25zKCkge1xuICAgIHRoaXMub3B0aW9ucyA9IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhpcy5jb2xvckNvbmZpZy5iZyxcbiAgICAgIGNvbG9yOiBbXG4gICAgICAgIHRoaXMuY29sb3JDb25maWcud2FybmluZyxcbiAgICAgICAgdGhpcy5jb2xvckNvbmZpZy5pbmZvLFxuICAgICAgICB0aGlzLmNvbG9yQ29uZmlnLmRhbmdlcixcbiAgICAgICAgdGhpcy5jb2xvckNvbmZpZy5zdWNjZXNzLFxuICAgICAgICB0aGlzLmNvbG9yQ29uZmlnLnByaW1hcnksXG4gICAgICBdLFxuICAgICAgdG9vbHRpcDoge1xuICAgICAgICB0cmlnZ2VyOiAnaXRlbScsXG4gICAgICAgIGZvcm1hdHRlcjogJ3thfSA8YnIvPntifSA6IHtjfSAoe2R9JSknLFxuICAgICAgfSxcbiAgICAgIGxlZ2VuZDoge1xuICAgICAgICBvcmllbnQ6ICd2ZXJ0aWNhbCcsXG4gICAgICAgIGxlZnQ6ICdsZWZ0JyxcbiAgICAgICAgZGF0YTogWydVU0EnLCAnR2VybWFueScsICdGcmFuY2UnLCAnQ2FuYWRhJywgJ1J1c3NpYSddLFxuICAgICAgICB0ZXh0U3R5bGU6IHtcbiAgICAgICAgICBjb2xvcjogdGhpcy5jb2xvckNvbmZpZy50ZXh0Q29sb3IsXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAgc2VyaWVzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBuYW1lOiAnQ291bnRyaWVzJyxcbiAgICAgICAgICB0eXBlOiAncGllJyxcbiAgICAgICAgICByYWRpdXM6ICc4MCUnLFxuICAgICAgICAgIGNlbnRlcjogWyc1MCUnLCAnNTAlJ10sXG4gICAgICAgICAgZGF0YTogdGhpcy5fZGF0YSxcbiAgICAgICAgICBpdGVtU3R5bGU6IHtcbiAgICAgICAgICAgIGVtcGhhc2lzOiB7XG4gICAgICAgICAgICAgIHNoYWRvd0JsdXI6IDEwLFxuICAgICAgICAgICAgICBzaGFkb3dPZmZzZXRYOiAwLFxuICAgICAgICAgICAgICBzaGFkb3dDb2xvcjogdGhpcy5jb2xvckNvbmZpZy5pdGVtSG92ZXJTaGFkb3dDb2xvcixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgICBsYWJlbDoge1xuICAgICAgICAgICAgbm9ybWFsOiB7XG4gICAgICAgICAgICAgIHRleHRTdHlsZToge1xuICAgICAgICAgICAgICAgIGNvbG9yOiB0aGlzLmNvbG9yQ29uZmlnLnRleHRDb2xvcixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgICBsYWJlbExpbmU6IHtcbiAgICAgICAgICAgIG5vcm1hbDoge1xuICAgICAgICAgICAgICBsaW5lU3R5bGU6IHtcbiAgICAgICAgICAgICAgICBjb2xvcjogdGhpcy5jb2xvckNvbmZpZy5heGlzTGluZUNvbG9yLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9O1xuICB9XG5cbn1cbiJdfQ==