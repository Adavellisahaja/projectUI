import { Component, ChangeDetectionStrategy, Input, Directive, ElementRef, ChangeDetectorRef, NgZone, NgModule } from '@angular/core';
import { NbThemeService } from '@nebular/theme';
import { Subject, combineLatest } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { ɵa } from 'ngx-echarts';
import { HttpClient, HttpClientModule } from '@angular/common/http';
import { registerMap } from 'echarts';
import { CommonModule } from '@angular/common';
import { tileLayer, latLng } from 'leaflet';
import { LeafletModule } from '@asymmetrik/ngx-leaflet';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class BkBarChartComponent {
    /**
     * @param {?} theme
     */
    constructor(theme) {
        this.theme = theme;
        this.options = {};
        this._data = [];
        this.colorConfig = {};
        this.destroyed$ = new Subject();
    }
    /**
     * @param {?} data
     * @return {?}
     */
    set data(data) {
        this._data = data;
        this.updateOptions();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.theme.getJsTheme()
            .pipe(takeUntil(this.destroyed$))
            .subscribe((/**
         * @param {?} config
         * @return {?}
         */
        (config) => {
            this.colorConfig = config.variables.charts;
            this.updateOptions();
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.destroyed$.next();
    }
    /**
     * @private
     * @return {?}
     */
    updateOptions() {
        this.options = {
            backgroundColor: this.colorConfig.bg,
            color: [this.colorConfig.primary],
            tooltip: {
                trigger: 'axis',
                axisPointer: {
                    type: 'shadow',
                },
            },
            grid: {
                left: '3%',
                right: '4%',
                bottom: '3%',
                containLabel: true,
            },
            xAxis: [
                {
                    type: 'category',
                    data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],
                    axisTick: {
                        alignWithLabel: true,
                    },
                    axisLine: {
                        lineStyle: {
                            color: this.colorConfig.axisLineColor,
                        },
                    },
                    axisLabel: {
                        textStyle: {
                            color: this.colorConfig.textColor,
                        },
                    },
                },
            ],
            yAxis: [
                {
                    type: 'value',
                    axisLine: {
                        lineStyle: {
                            color: this.colorConfig.axisLineColor,
                        },
                    },
                    splitLine: {
                        lineStyle: {
                            color: this.colorConfig.splitLineColor,
                        },
                    },
                    axisLabel: {
                        textStyle: {
                            color: this.colorConfig.textColor,
                        },
                    },
                },
            ],
            series: [
                {
                    name: 'Score',
                    type: 'bar',
                    barWidth: '60%',
                    data: [10, 52, 200, 334, 390, 330, 220],
                },
            ],
        };
    }
}
BkBarChartComponent.decorators = [
    { type: Component, args: [{
                selector: 'bk-bar-chart',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: `
    <div echarts [options]="options" [autoResize]="true" [style.height.%]="100"></div>
  `,
                styles: [':host { display: block }']
            }] }
];
/** @nocollapse */
BkBarChartComponent.ctorParameters = () => [
    { type: NbThemeService }
];
BkBarChartComponent.propDecorators = {
    data: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// tslint:disable-next-line:directive-selector
class EchartsDirective extends ɵa {
    /**
     * @param {?} element
     * @param {?} cd
     * @param {?} ngZone
     */
    constructor(element, cd, ngZone) {
        super(element, ngZone);
        this.element = element;
        this.cd = cd;
        this.alive = true;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.alive = false;
    }
    /**
     * @return {?}
     */
    ngDoCheck() {
        super.ngDoCheck();
        this.invalidate();
    }
    /**
     * Echarts work in a strange way, they're detecting if component visible or not
     * and only then trying to decide render chart or not.
     * In a number of cases like Nebular Tabset we have element already rendered but hidden for now.
     * And when we're trying to make it visible echarts doesn't react and stays not rendered.
     *
     * Invoking intersection observer on each doCheck provides us the ability to track
     * whether we need to update charts component or not.
     *
     * @private
     * @return {?}
     */
    invalidate() {
        /** @type {?} */
        const o = new IntersectionObserver((/**
         * @param {?} entries
         * @return {?}
         */
        (entries) => {
            const [entry] = entries;
            // Means component is visible
            if (entry.isIntersecting) {
                if (this.alive) {
                    this.cd.detectChanges();
                }
                o.disconnect();
            }
        }));
        o.observe(this.element.nativeElement);
    }
}
EchartsDirective.decorators = [
    { type: Directive, args: [{ selector: '[echarts]' },] }
];
/** @nocollapse */
EchartsDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: ChangeDetectorRef },
    { type: NgZone }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class EchartsModule {
}
EchartsModule.decorators = [
    { type: NgModule, args: [{
                declarations: [EchartsDirective],
                exports: [EchartsDirective],
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class BkBarChartModule {
}
BkBarChartModule.decorators = [
    { type: NgModule, args: [{
                imports: [EchartsModule],
                declarations: [BkBarChartComponent],
                exports: [BkBarChartComponent],
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class BkBubbleMapComponent {
    /**
     * @param {?} theme
     * @param {?} http
     * @param {?} cd
     */
    constructor(theme, http, cd) {
        this.theme = theme;
        this.http = http;
        this.cd = cd;
        this.options = {};
        this._data = { countryCoordinates: [], mapData: [] };
        this.colorConfig = {};
        this.geoColors = [];
        this.countryColorMap = {};
        this.max = -Infinity;
        this.destroyed$ = new Subject();
    }
    /**
     * @param {?} data
     * @return {?}
     */
    set data(data) {
        this._data = data;
        // avoid showing map without colors
        if (this.initialized) {
            this.updateOptions();
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        combineLatest([
            this.http.get('assets/map/world.json'),
            this.theme.getJsTheme(),
        ])
            .pipe(takeUntil(this.destroyed$))
            .subscribe((/**
         * @param {?} __0
         * @return {?}
         */
        ([map, config]) => {
            registerMap('world', map);
            this.initColors(config);
            this.updateOptions();
            this.initialized = true;
            this.cd.detectChanges();
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.destroyed$.next();
    }
    /**
     * @private
     * @param {?} config
     * @return {?}
     */
    initColors(config) {
        this.colorConfig = config.variables.bubbleMap;
        this.geoColors = [
            this.colorConfig.primary,
            this.colorConfig.info,
            this.colorConfig.success,
            this.colorConfig.warning,
            this.colorConfig.danger,
        ];
        this._data.mapData.forEach((/**
         * @param {?} itemOpt
         * @return {?}
         */
        itemOpt => {
            this.countryColorMap[itemOpt.name] = this.getRandomGeoColor();
        }));
    }
    /**
     * @private
     * @return {?}
     */
    updateOptions() {
        this._data.mapData.forEach((/**
         * @param {?} itemOpt
         * @return {?}
         */
        (itemOpt) => {
            if (itemOpt.value > this.max) {
                this.max = itemOpt.value;
            }
        }));
        this.options = {
            title: {
                text: 'World Population (2011)',
                left: 'center',
                top: 'top',
                textStyle: {
                    color: this.colorConfig.titleColor,
                },
            },
            tooltip: {
                trigger: 'item',
                formatter: (/**
                 * @param {?} params
                 * @return {?}
                 */
                params => {
                    return params.name + ': ' + params.value[2];
                }),
            },
            visualMap: {
                show: false,
                min: 0,
                max: this.max,
                inRange: {
                    symbolSize: [6, 60],
                },
            },
            geo: {
                name: 'World Population (2010)',
                type: 'map',
                map: 'world',
                roam: true,
                label: {
                    emphasis: {
                        show: false,
                    },
                },
                itemStyle: {
                    normal: {
                        areaColor: this.colorConfig.areaColor,
                        borderColor: this.colorConfig.areaBorderColor,
                    },
                    emphasis: {
                        areaColor: this.colorConfig.areaHoverColor,
                    },
                },
                zoom: 1.1,
            },
            series: [
                {
                    type: 'scatter',
                    coordinateSystem: 'geo',
                    data: this._data.mapData.map((/**
                     * @param {?} itemOpt
                     * @return {?}
                     */
                    itemOpt => {
                        return {
                            name: itemOpt.name,
                            value: [
                                this._data.countryCoordinates[itemOpt.code].longitude,
                                this._data.countryCoordinates[itemOpt.code].latitude,
                                itemOpt.value,
                            ],
                            itemStyle: {
                                normal: {
                                    color: this.getCountryColor(itemOpt.name),
                                },
                            },
                        };
                    })),
                },
            ],
        };
    }
    /**
     * @private
     * @param {?} countryName
     * @return {?}
     */
    getCountryColor(countryName) {
        /** @type {?} */
        const color = this.countryColorMap[countryName];
        if (color) {
            return color;
        }
        /** @type {?} */
        const generatedColor = this.getRandomGeoColor();
        this.countryColorMap[countryName] = generatedColor;
        return generatedColor;
    }
    /**
     * @private
     * @return {?}
     */
    getRandomGeoColor() {
        /** @type {?} */
        const index = Math.round(Math.random() * this.geoColors.length);
        return this.geoColors[index];
    }
}
BkBubbleMapComponent.decorators = [
    { type: Component, args: [{
                selector: 'bk-bubble-map',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: `
    <div echarts [options]="options" [autoResize]="true" [style.height.%]="100"></div>
  `,
                styles: [':host { display: block }']
            }] }
];
/** @nocollapse */
BkBubbleMapComponent.ctorParameters = () => [
    { type: NbThemeService },
    { type: HttpClient },
    { type: ChangeDetectorRef }
];
BkBubbleMapComponent.propDecorators = {
    data: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class BkBubbleMapModule {
}
BkBubbleMapModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, HttpClientModule, EchartsModule],
                declarations: [BkBubbleMapComponent],
                exports: [BkBubbleMapComponent],
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class BkDoughnutChartComponent {
    /**
     * @param {?} theme
     */
    constructor(theme) {
        this.theme = theme;
        this.options = {};
        this._data = [];
        this.colorConfig = {};
        this.destroyed$ = new Subject();
    }
    /**
     * @param {?} data
     * @return {?}
     */
    set data(data) {
        this._data = data;
        this.updateOptions();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.theme.getJsTheme()
            .pipe(takeUntil(this.destroyed$))
            .subscribe((/**
         * @param {?} config
         * @return {?}
         */
        (config) => {
            this.colorConfig = config.variables.charts;
            this.updateOptions();
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.destroyed$.next();
    }
    /**
     * @private
     * @return {?}
     */
    updateOptions() {
        this.options = {
            backgroundColor: this.colorConfig.bg,
            color: [
                this.colorConfig.warning,
                this.colorConfig.info,
                this.colorConfig.danger,
                this.colorConfig.success,
                this.colorConfig.primary,
            ],
            tooltip: {
                trigger: 'item',
                formatter: '{a} <br/>{b}: {c} ({d}%)',
            },
            legend: {
                orient: 'vertical',
                x: 'left',
                data: ['USA', 'Germany', 'France', 'Canada', 'Russia'],
                textStyle: {
                    color: this.colorConfig.textColor,
                },
            },
            series: [
                {
                    name: 'Countries',
                    type: 'pie',
                    radius: ['50%', '70%'],
                    avoidLabelOverlap: false,
                    label: {
                        normal: {
                            show: false,
                            position: 'center',
                        },
                        emphasis: {
                            show: true,
                            textStyle: {
                                fontSize: '25',
                                fontWeight: 'bold',
                            },
                        },
                    },
                    data: this._data,
                },
            ],
        };
    }
}
BkDoughnutChartComponent.decorators = [
    { type: Component, args: [{
                selector: 'bk-doughnut-chart',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: `
    <div echarts [options]="options" [autoResize]="true" [style.height.%]="100"></div>
  `,
                styles: [':host { display: block }']
            }] }
];
/** @nocollapse */
BkDoughnutChartComponent.ctorParameters = () => [
    { type: NbThemeService }
];
BkDoughnutChartComponent.propDecorators = {
    data: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class BkDoughnutChartModule {
}
BkDoughnutChartModule.decorators = [
    { type: NgModule, args: [{
                imports: [EchartsModule],
                declarations: [BkDoughnutChartComponent],
                exports: [BkDoughnutChartComponent],
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class BkLineChartComponent {
    /**
     * @param {?} theme
     */
    constructor(theme) {
        this.theme = theme;
        this.options = {};
        this._data = { income: [], outcome: [], profit: [] };
        this.colorConfig = {};
        this.destroyed$ = new Subject();
    }
    /**
     * @param {?} data
     * @return {?}
     */
    set data(data) {
        this._data = data;
        this.updateOptions();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.theme.getJsTheme()
            .pipe(takeUntil(this.destroyed$))
            .subscribe((/**
         * @param {?} config
         * @return {?}
         */
        (config) => {
            this.colorConfig = config.variables.charts;
            this.updateOptions();
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.destroyed$.next();
    }
    /**
     * @private
     * @return {?}
     */
    updateOptions() {
        this.options = {
            backgroundColor: this.colorConfig.bg,
            color: [this.colorConfig.danger, this.colorConfig.primary, this.colorConfig.info],
            tooltip: {
                trigger: 'item',
                formatter: '{a} <br/>{b} : {c}',
            },
            xAxis: [
                {
                    type: 'category',
                    data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],
                    axisTick: {
                        alignWithLabel: true,
                    },
                    axisLine: {
                        lineStyle: {
                            color: this.colorConfig.axisLineColor,
                        },
                    },
                    axisLabel: {
                        textStyle: {
                            color: this.colorConfig.textColor,
                        },
                    },
                },
            ],
            yAxis: [
                {
                    axisLine: {
                        lineStyle: {
                            color: this.colorConfig.axisLineColor,
                        },
                    },
                    splitLine: {
                        lineStyle: {
                            color: this.colorConfig.splitLineColor,
                        },
                    },
                    axisLabel: {
                        textStyle: {
                            color: this.colorConfig.textColor,
                        },
                    },
                },
            ],
            grid: {
                left: '3%',
                right: '4%',
                bottom: '3%',
                containLabel: true,
            },
            series: [
                {
                    name: 'Income',
                    type: 'line',
                    data: this._data.income,
                },
                {
                    name: 'Outcome',
                    type: 'line',
                    data: this._data.outcome,
                },
                {
                    name: 'Profit',
                    type: 'line',
                    data: this._data.profit,
                },
            ],
        };
    }
}
BkLineChartComponent.decorators = [
    { type: Component, args: [{
                selector: 'bk-line-chart',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: `
    <div echarts [options]="options" [autoResize]="true" [style.height.%]="100"></div>
  `,
                styles: [':host { display: block }']
            }] }
];
/** @nocollapse */
BkLineChartComponent.ctorParameters = () => [
    { type: NbThemeService }
];
BkLineChartComponent.propDecorators = {
    data: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class BkLineChartModule {
}
BkLineChartModule.decorators = [
    { type: NgModule, args: [{
                imports: [EchartsModule],
                declarations: [BkLineChartComponent],
                exports: [BkLineChartComponent],
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class BkMultipleAxisChartComponent {
    /**
     * @param {?} theme
     */
    constructor(theme) {
        this.theme = theme;
        this.options = {};
        this._data = { firstDataset: [], secondDataset: [] };
        this.colorConfig = {};
        this.destroyed$ = new Subject();
    }
    /**
     * @param {?} data
     * @return {?}
     */
    set data(data) {
        this._data = data;
        this.updateOptions();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.theme.getJsTheme()
            .pipe(takeUntil(this.destroyed$))
            .subscribe((/**
         * @param {?} config
         * @return {?}
         */
        (config) => {
            this.colorConfig = config.variables.charts;
            this.updateOptions();
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.destroyed$.next();
    }
    /**
     * @private
     * @return {?}
     */
    updateOptions() {
        this.options = {
            backgroundColor: this.colorConfig.bg,
            color: [
                this.colorConfig.primary,
                this.colorConfig.info,
            ],
            tooltip: {
                trigger: 'axis',
                axisPointer: {
                    type: 'cross',
                },
            },
            legend: {
                data: ['First Dataset', 'Second Dataset'],
                textStyle: {
                    color: this.colorConfig.textColor,
                },
            },
            xAxis: [
                {
                    type: 'category',
                    axisTick: {
                        alignWithLabel: true,
                    },
                    data: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],
                    axisLine: {
                        lineStyle: {
                            color: this.colorConfig.axisLineColor,
                        },
                    },
                    splitLine: {
                        lineStyle: {
                            color: this.colorConfig.splitLineColor,
                        },
                    },
                    axisLabel: {
                        textStyle: {
                            color: this.colorConfig.textColor,
                        },
                    },
                },
            ],
            yAxis: [
                {
                    type: 'value',
                    name: 'First Dataset',
                    min: -90,
                    max: 60,
                    position: 'left',
                    axisLine: {
                        lineStyle: {
                            color: this.colorConfig.primary,
                        },
                    },
                    axisLabel: {
                        formatter: '{value} °C',
                    },
                },
                {
                    type: 'value',
                    name: 'Second Dataset',
                    min: -90,
                    max: 80,
                    position: 'right',
                    axisLine: {
                        lineStyle: {
                            color: this.colorConfig.danger,
                        },
                    },
                    axisLabel: {
                        formatter: '{value} °C',
                    },
                    splitLine: {
                        show: false,
                    },
                },
            ],
            series: [
                {
                    name: 'First Dataset',
                    type: 'line',
                    yAxisIndex: 0,
                    smooth: true,
                    itemStyle: { color: this.colorConfig.primary },
                    data: this._data.firstDataset,
                },
                {
                    name: 'Second Dataset',
                    type: 'line',
                    yAxisIndex: 1,
                    smooth: true,
                    itemStyle: { color: this.colorConfig.danger },
                    data: this._data.secondDataset,
                },
            ],
        };
    }
}
BkMultipleAxisChartComponent.decorators = [
    { type: Component, args: [{
                selector: 'bk-multiple-axis-chart',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: `
    <div echarts [options]="options" [autoResize]="true" [style.height.%]="100"></div>
  `,
                styles: [':host { display: block }']
            }] }
];
/** @nocollapse */
BkMultipleAxisChartComponent.ctorParameters = () => [
    { type: NbThemeService }
];
BkMultipleAxisChartComponent.propDecorators = {
    data: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class BkMultipleAxisChartModule {
}
BkMultipleAxisChartModule.decorators = [
    { type: NgModule, args: [{
                imports: [EchartsModule],
                declarations: [BkMultipleAxisChartComponent],
                exports: [BkMultipleAxisChartComponent],
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class BkMultipleBarChartComponent {
    /**
     * @param {?} theme
     */
    constructor(theme) {
        this.theme = theme;
        this.options = {};
        this._data = { firstDataset: [], secondDataset: [] };
        this.colorConfig = {};
        this.destroyed$ = new Subject();
    }
    /**
     * @param {?} data
     * @return {?}
     */
    set data(data) {
        this._data = data;
        this.updateOptions();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.theme.getJsTheme()
            .pipe(takeUntil(this.destroyed$))
            .subscribe((/**
         * @param {?} config
         * @return {?}
         */
        (config) => {
            this.colorConfig = config.variables.charts;
            this.updateOptions();
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.destroyed$.next();
    }
    /**
     * @private
     * @return {?}
     */
    updateOptions() {
        this.options = {
            backgroundColor: this.colorConfig.bg,
            color: [this.colorConfig.primary],
            legend: {
                data: ['First Dataset', 'Second Dataset'],
                textStyle: {
                    color: this.colorConfig.textColor,
                },
            },
            tooltip: {
                trigger: 'axis',
                axisPointer: {
                    type: 'shadow',
                },
            },
            grid: {
                left: '3%',
                right: '4%',
                bottom: '3%',
                containLabel: true,
            },
            xAxis: [
                {
                    type: 'category',
                    data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],
                    axisTick: {
                        alignWithLabel: true,
                    },
                    axisLine: {
                        lineStyle: {
                            color: this.colorConfig.axisLineColor,
                        },
                    },
                    axisLabel: {
                        textStyle: {
                            color: this.colorConfig.textColor,
                        },
                    },
                },
            ],
            yAxis: [
                {
                    type: 'value',
                    axisLine: {
                        lineStyle: {
                            color: this.colorConfig.axisLineColor,
                        },
                    },
                    splitLine: {
                        lineStyle: {
                            color: this.colorConfig.splitLineColor,
                        },
                    },
                    axisLabel: {
                        textStyle: {
                            color: this.colorConfig.textColor,
                        },
                    },
                },
            ],
            series: [
                {
                    name: 'First Dataset',
                    type: 'bar',
                    itemStyle: { color: this.colorConfig.primary },
                    data: this._data.firstDataset,
                },
                {
                    name: 'Second Dataset',
                    type: 'bar',
                    itemStyle: { color: this.colorConfig.danger },
                    data: this._data.secondDataset,
                },
            ],
        };
    }
}
BkMultipleBarChartComponent.decorators = [
    { type: Component, args: [{
                selector: 'bk-multiple-bar-chart',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: `
    <div echarts [options]="options" [autoResize]="true" [style.height.%]="100"></div>
  `,
                styles: [':host { display: block }']
            }] }
];
/** @nocollapse */
BkMultipleBarChartComponent.ctorParameters = () => [
    { type: NbThemeService }
];
BkMultipleBarChartComponent.propDecorators = {
    data: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class BkMultipleBarChartModule {
}
BkMultipleBarChartModule.decorators = [
    { type: NgModule, args: [{
                imports: [EchartsModule],
                declarations: [BkMultipleBarChartComponent],
                exports: [BkMultipleBarChartComponent],
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class BkPieChartComponent {
    /**
     * @param {?} theme
     */
    constructor(theme) {
        this.theme = theme;
        this.options = {};
        this._data = [];
        this.colorConfig = {};
        this.destroyed$ = new Subject();
    }
    /**
     * @param {?} data
     * @return {?}
     */
    set data(data) {
        this._data = data;
        this.updateOptions();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.theme.getJsTheme()
            .pipe(takeUntil(this.destroyed$))
            .subscribe((/**
         * @param {?} config
         * @return {?}
         */
        (config) => {
            this.colorConfig = config.variables.charts;
            this.updateOptions();
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.destroyed$.next();
    }
    /**
     * @private
     * @return {?}
     */
    updateOptions() {
        this.options = {
            backgroundColor: this.colorConfig.bg,
            color: [
                this.colorConfig.warning,
                this.colorConfig.info,
                this.colorConfig.danger,
                this.colorConfig.success,
                this.colorConfig.primary,
            ],
            tooltip: {
                trigger: 'item',
                formatter: '{a} <br/>{b} : {c} ({d}%)',
            },
            legend: {
                orient: 'vertical',
                left: 'left',
                data: ['USA', 'Germany', 'France', 'Canada', 'Russia'],
                textStyle: {
                    color: this.colorConfig.textColor,
                },
            },
            series: [
                {
                    name: 'Countries',
                    type: 'pie',
                    radius: '80%',
                    center: ['50%', '50%'],
                    data: this._data,
                    itemStyle: {
                        emphasis: {
                            shadowBlur: 10,
                            shadowOffsetX: 0,
                            shadowColor: this.colorConfig.itemHoverShadowColor,
                        },
                    },
                    label: {
                        normal: {
                            textStyle: {
                                color: this.colorConfig.textColor,
                            },
                        },
                    },
                    labelLine: {
                        normal: {
                            lineStyle: {
                                color: this.colorConfig.axisLineColor,
                            },
                        },
                    },
                },
            ],
        };
    }
}
BkPieChartComponent.decorators = [
    { type: Component, args: [{
                selector: 'bk-pie-chart',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: `
    <div echarts [options]="options" [autoResize]="true" [style.height.%]="100"></div>
  `,
                styles: [':host { display: block }']
            }] }
];
/** @nocollapse */
BkPieChartComponent.ctorParameters = () => [
    { type: NbThemeService }
];
BkPieChartComponent.propDecorators = {
    data: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class BkPieChartModule {
}
BkPieChartModule.decorators = [
    { type: NgModule, args: [{
                imports: [EchartsModule],
                declarations: [BkPieChartComponent],
                exports: [BkPieChartComponent],
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class BkMapComponent {
    constructor() {
        this.options = {
            layers: [
                tileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', { maxZoom: 18, attribution: '...' }),
            ],
            zoom: 5,
            center: latLng({ lat: 38.991709, lng: -76.886109 }),
        };
    }
}
BkMapComponent.decorators = [
    { type: Component, args: [{
                selector: 'bk-map',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: `
    <div leaflet [leafletOptions]="options"></div>
  `,
                styles: [":host{display:block}div[leaflet]{width:100%;height:100%}"]
            }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class BkMapModule {
}
BkMapModule.decorators = [
    { type: NgModule, args: [{
                imports: [LeafletModule],
                declarations: [BkMapComponent],
                exports: [BkMapComponent],
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { BkBarChartComponent, BkBarChartModule, BkBubbleMapComponent, BkBubbleMapModule, BkDoughnutChartComponent, BkDoughnutChartModule, BkLineChartComponent, BkLineChartModule, BkMapComponent, BkMapModule, BkMultipleAxisChartComponent, BkMultipleAxisChartModule, BkMultipleBarChartComponent, BkMultipleBarChartModule, BkPieChartComponent, BkPieChartModule, EchartsModule as ɵa, EchartsDirective as ɵb };
//# sourceMappingURL=uibakery-kit.js.map
